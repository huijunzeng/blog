######################
# ${server.port:8080}表示需要从全局的配置内容中读取server.port的配置信息，如果没有找到则使用冒号（:） 后的内容
######################

## 用本地配置
server:
    port: 8081 # 启动端口
spring:
    application:
        name: gateway-web
    cloud:
        nacos:
            discovery: #nacos注册中心地址配置
                server-addr: localhost:8848
                namespace: a4d0cf40-1125-4263-81e5-3f628bc90302 # 命名空间ID
                #group: blog # 配置管理Group
            config: #nacos配置中心地址配置
                server-addr: localhost:8848
        #网关配置
        gateway:
            #默认的全局过滤器
            default-filters:
            discovery:
                locator:
                    enabled: true #注册中心生效，可以自动根据注册中心的服务名进行路由转发
            routes: #路由配置，实际生产环境需要做到动态路由配置
                ##authorization-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9777/   或者注册服务serviceId的方式： lb://ribbon-consumer
                -   id: authorization-server #路由的唯一id
                    uri: lb://authorization-server
                    predicates: #断言，即路由的规则
                        - Path=/authorization-server/**
                    filters: #过滤器
                        - StripPrefix=1 #url截取的个数 本例会把/authorization-server截掉，截掉后的部分才是转发的url路径
                ##authentication-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9779/   或者注册服务serviceId的方式： lb://feign-consumer
                -   id: authentication-server
                    uri: lb://authentication-server
                    predicates:
                        - Path=/authentication-server/**
                    filters:
                        - StripPrefix=1
        #sentinel配置
        sentinel:
            transport:
                port: 8719 #指定客户端监控 API 的端口  默认，可不设置
                dashboard: localhost:8080 #控制台的地址
    # 数据源mysql配置
    datasource:
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: jdbc:mysql://localhost:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false
        username: root
        password: 123456
        # 数据源hikari连接池配置
        type: com.zaxxer.hikari.HikariDataSource
        hikari:
            minimum-idle: 5 # 池中维护的最小空闲连接数
            idle-timeout: 180000 # 连接允许在池中闲置的最长时间
            maximum-pool-size: 10 # 池中最大连接数，包括闲置和使用中的连接
            auto-commit: true # 自动提交从池中返回的连接
            pool-name: HikariCP # 连接池的用户定义名称
            max-lifetime: 1800000 # 池中连接最长生命周期
            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数
            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句
    # redis配置
    redis:
        host: localhost
        port: 6379
        password:
    #profiles:
    #    active: dev # 根据不同环境切换配置环境
zuul:
    sensitive-headers: Cookie,Set-Cookie
    routes:
        authorization-server: #自定义名称
            sensitive-headers: Cookie,Set-Cookie
            service-id: authorization-server #服务的spring.application.name(所以前面说了个属性很重要，要注意) ant风格路径表达式，只能匹配一个层级
            path: /authorization-server/**
            #stripPrefix: true #如果stripPrefix=false，则去掉/ribbon，转发的请求是/**；如果为true，转发的请求是/ribbon/**
        authentication-server: #自定义名称
            service-id: authentication-server #服务的spring.application.name(所以前面说了个属性很重要，要注意) ant风格路径表达式，只能匹配一个层级
            path: /authentication-server/**
            #stripPrefix: true #如果stripPrefix=false，则去掉/feign，转发的请求是/**；如果为true，转发的请求是/feign/** ?????还没解决

#如果您通过指定URL配置了Zuul路由，则需要使用
    max:
        host:
            connections: 500
    host:
        socket-timeout-millis: 60000
        connect-timeout-millis: 60000
#如果Zuul使用服务发现，则需要使用
ribbon:
    ReadTimeout: 60000
    ConnectTimeout: 60000

#熔断机制超时
hystrix:
    command:
        default:
            execution:
                timeout:
                    enabled: true
                isolation:
                    thread:
                        timeoutInMilliseconds: 240000
#认证服务器地址
#oauth-server: http://localhost:9779/authentication-server
#security:
#    oauth2:
#        #   和认证服务器中的client设置对应
#        client:
#        client-id: zuul
#            client-secret: secret
#            #	   获取令牌地址
#            access-token-uri: ${oauth-server}/oauth/token
#            #      认证地址
#            user-authorization-uri: ${oauth-server}/oauth/authorize
#            resource:
#                #      进行令牌校验
#                #      一、访问controller获取Principal
#                #      user-info-uri: ${oauth-server}/oauth2_token/current
#                #      prefer-token-info: false
#                #      二、访问授权服务器获取公钥 解析令牌
#                jwt:
#                    key-uri: ${oauth-server}/oauth/token_key

name: gateway-web  #测试用
logging: #日志配置文件引入
    config: classpath:logback-logstash.xml

############  skywalking 探针  在VM Options添加以下参数 -javaagent：agent的jar包所在路径  Dskywalking.agent.service_name：自定义的service的name -Dskywalking.collector.backend_service：aop的地址 ###########

#-javaagent:D:/skywalking-agent/skywalking-agent.jar
#-Dskywalking.agent.service_name=test
#-Dskywalking.collector.backend_service=localhost:11800
####################################################


############  sentinel引入 ###########
#下载并启动sentinel-dashboard.jar  （暂时没有官方镜像）
####################################################


## 忽视鉴权的url
gateway:
    ignore:
        authentication:
            url: /oauth/