######################
# ${server.port:8080}表示需要从全局的配置内容中读取server.port的配置信息，如果没有找到则使用冒号（:） 后的内容
######################

## 用本地配置
server:
    port: ${SERVER_PORT:8081} # 启动端口
spring:
    application:
        name: ${SPRING_APPLICATION_NAME:gateway-web}
    cloud:
        nacos:
            discovery: # nacos注册中心地址配置
                server-addr: ${SPRING_CLOUD_NACOS_SERVERADDR:localhost:8848}
                namespace: ${SPRING_CLOUD_NACOS_DISCOVERY_NAMESPACE:a4d0cf40-1125-4263-81e5-3f628bc90302} # 命名空间ID
                group: ${SPRING_CLOUD_NACOS_DISCOVERY_GROUP:blog} # 配置管理Group
            config: # nacos配置中心地址配置
                server-addr: ${SPRING_CLOUD_NACOS_SERVERADDR:localhost:8848}
                file-extension: ${SPRING_CLOUD_NACOS_FILEEXTENSION:yml} # nacos配置文件格式后缀
                namespace: ${SPRING_CLOUD_NACOS_CONFIG_NAMESPACE:a4d0cf40-1125-4263-81e5-3f628bc90302} # 命名空间ID
                group: ${SPRING_CLOUD_NACOS_CONFIG_GROUP:blog} # 配置管理Group
        #网关配置
        gateway:
            #默认的全局过滤器
            default-filters:
            discovery:
                locator:
                    enabled: ${SPRING_CLOUD_GATEWAY_DISCOVERY_LOCATOR_ENABLED:false} #注册中心生效，可以自动根据注册中心的服务名进行路由转发（而不需要像以下配置routes）
            routes: #路由配置，实际生产环境需要做到动态路由配置
                ##authorization-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9777/   或者注册服务serviceId的方式： lb://ribbon-consumer
                -   id: authorization-server #路由的唯一id
                    uri: lb://authorization-server
                    predicates: #断言，即路由的规则
                        - Path=/authorization-server/**
                    filters: #过滤器
                        - StripPrefix=1 #url截取的个数 本例会把/authorization-server截掉，截掉后的部分才是转发的url路径
                ##authentication-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9779/   或者注册服务serviceId的方式： lb://feign-consumer
                -   id: authentication-server
                    uri: lb://authentication-server
                    predicates:
                        - Path=/authentication-server/**
                    filters:
                        - StripPrefix=1
                -   id: admin-user
                    uri: lb://admin-user
                    predicates:
                        - Path=/admin-user/**
                    filters:
                        - StripPrefix=1
                -   id: article-admin
                    uri: lb://article-admin
                    predicates:
                        - Path=/article-admin/**
                    filters:
                        - StripPrefix=1
                -   id: file-server
                    uri: lb://file-server
                    predicates:
                       - Path=/file-server/**
                    filters:
                       - StripPrefix=1
        #sentinel配置
        sentinel:
            transport:
                port: ${SPRING_CLOUD_SENTINEL_TRANSPORT_PORT:8719} #指定客户端监控 API 的端口 可不提供，默认为 8719，若端口冲突会自动向下探测可用的端口
                dashboard: ${SPRING_CLOUD_SENTINEL_TRANSPORT_DASHBOARD:localhost:8080} #控制台的地址
    # redis配置
    redis:
        host: ${SPRING_REDIS_HOST:localhost}
        port: ${SPRING_REDIS_PORT:6379}
        password: ${SPRING_REDIS_PASSWORD:}
    # zipkin配置，链路调用可视化面板
    zipkin:
        enabled: ${SPRING_ZIPKIN_ENABLED:true} #默认允许开启
            #base-url: ${SPRING_ZIPKIN_BASEURL:http://localhost:9411/} #zipkin服务器地址（只有sender type为web时才需要配置），sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar包安装运行
            sender:
                type: ${SPRING_ZIPKIN_SENDER_TYPE:rabbit} #发送方式（一共四种，默认web，需要配置base-url参数；设置其他三项则需要配置mq参数（连接成功后默认会生成一个zipkin的队列名称进行链路消息的发送与消费），无需再配置base-url参数，使用mq的好处能达到解耦，不需关心Zipkin服务器的状态）：activemq，rabbit，kafka，web  当配置了base-url，此项可不配置，默认使用http方式收集
    # sleuth链路跟踪配置
    sleuth:
        sampler:
            # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置
            probability: ${SPRING_SLEUTH_SAMPLER_PROBABILITY:1}
    #rabbitmq配置
    rabbitmq:
        host: ${SPRING_RABBITMQ_HOST:localhost} #ip
        port: ${SPRING_RABBITMQ_PORT:5672} #端口
        username: ${SPRING_RABBITMQ_USERNAME:guest} #用户名
        password: ${SPRING_RABBITMQ_PASSWORD:guest} #密码
        virtual-host: / #虚拟主机 每个virtual-host相当于一个相对独立的RabbitMQ服务器，每个virtual-host之间是相互隔离的
        listener:
            simple:
                retry:
                    enabled: false #监听重试是否可用
                    max-attempts: 5 #最大重试次数
                    initial-interval: 3000 #重试间隔次数
    #profiles:
    #    active: dev # 根据不同环境切换配置环境
name: gateway-web  #测试用
##使用sentinel配置
feign:
    sentinel:
        enabled: ${FEIGN_SENTINEL_ENABLED:true}
############  sentinel引入 ###########
#下载并启动sentinel-dashboard.jar  （暂时没有官方镜像）
####################################################

## 忽视鉴权的url
gateway:
    ignore:
        authentication:
            url: ${GATEWAY_IGNORE_AUTHENTICATION_URL:/oauth/,/v3/api-docs,/favor.ioc} #/oauth/ Oauth2授权端点    /v3/api-docs Swagger3接口页面的端点