/*
 Navicat Premium Data Transfer

 Source Server         : test
 Source Server Type    : MySQL
 Source Server Version : 80018
 Source Host           : 129.211.34.120:3306
 Source Schema         : nacos_config

 Target Server Type    : MySQL
 Target Server Version : 80018
 File Encoding         : 65001

 Date: 11/09/2020 16:31:16
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for config_info
-- ----------------------------
DROP TABLE IF EXISTS `config_info`;
CREATE TABLE `config_info`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'content',
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'source user',
  `src_ip` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'source ip',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT '租户字段',
  `c_desc` varchar(256) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `c_use` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `effect` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `type` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `c_schema` text CHARACTER SET utf8 COLLATE utf8_bin NULL,
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_configinfo_datagrouptenant`(`data_id`, `group_id`, `tenant_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 85 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'config_info' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of config_info
-- ----------------------------
INSERT INTO `config_info` VALUES (1, 'authorization-server-dev.yml', 'blog', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\nserver:\r\n    port: 9801 # 启动端口\r\nspring:\r\n    application:\r\n        name: authorization-server\r\n    #nacos注册中心地址配置\r\n    cloud:\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n    \r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/oauth2?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        enabled: true #默认允许开启\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar包安装运行\r\n        sender:\r\n            type: web #当配置了base-url，此项可不配置，默认使用http方式收集\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n        sampler:\r\n            # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n            probability: 1\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\nname: nacosConfig  #测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml', '01aefe7bdca8ed9b49d2f001460d81da', '2020-06-27 06:39:22', '2020-09-11 02:23:32', NULL, '116.21.13.15', '', 'a4d0cf40-1125-4263-81e5-3f628bc90302', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (2, 'authentication-server-dev.yml', 'blog', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\nserver:\r\n    port: 9802 # 启动端口\r\nspring:\r\n    application:\r\n        name: authentication-server\r\n    cloud:\r\n        nacos:\r\n            discovery: #nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/oauth2?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        enabled: true #默认允许开启\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar包安装运行\r\n        sender:\r\n            type: web #当配置了base-url，此项可不配置，默认使用http方式收集\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n        sampler:\r\n            # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n            probability: 1\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\nname: nacosConfig  #测试用\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml\r\n\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true', '582c3834fdb77a10d0325014cc18993a', '2020-06-27 06:39:22', '2020-09-11 02:23:45', NULL, '116.21.13.15', '', 'a4d0cf40-1125-4263-81e5-3f628bc90302', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (3, 'admin-user-dev.yml', 'blog', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.user\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 后台用户管理api\r\n            description: 后台用户管理接口\r\n            version: 2.0\r\n            name: ZJH\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9803 # 启动端口\r\nspring:\r\n    application:\r\n        name: admin-user\r\n    #nacos注册中心地址配置\r\n    cloud:\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口 可不提供，默认为 8719，若端口冲突会自动向下探测可用的端口\r\n                dashboard: 129.211.34.120:8088 #控制台的地址  \r\n            datasource:\r\n                ds_flow: #读取nacos数据源的sentinel流控规则 admin-user-sentinel-flow-rules+DEFAULT_GROUP+a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-flow-rules #需要在nacos上面配置这个名称的json格式流控规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: flow\r\n                ds_degrade: #读取nacos数据源的sentinel降级规则\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-degrade-rules #需要在nacos上面配置这个名称的json格式降级规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: degrade\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        enabled: true #默认允许开启\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar包安装运行\r\n        sender:\r\n            type: web #当配置了base-url，此项可不配置，默认使用http方式收集包安装运行\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n      sampler:\r\n          # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n          probability: 1\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    #实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.user.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        # mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n##feign使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml', 'f7deda115aea55a886592fadb5fbb505', '2020-06-27 06:39:22', '2020-09-11 02:24:01', NULL, '116.21.13.15', '', 'a4d0cf40-1125-4263-81e5-3f628bc90302', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (4, 'zuul-dev.yml', 'blog', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\nserver:\r\n    port: 8080 # 启动端口 \r\nspring:\r\n    application:\r\n        name: zuul\r\n    cloud:\r\n        nacos:\r\n            discovery: #nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n                namespace: a4d0cf40-1125-4263-81e5-3f628bc90302 # 命名空间ID\r\n                #group: blog # 配置管理Group\r\n            config: #nacos配置中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    #profiles:\r\n    #    active: dev # 根据不同环境切换配置环境\r\n\r\nzuul:\r\n    sensitive-headers: Cookie,Set-Cookie\r\n    routes:\r\n        authorization-server: #自定义名称\r\n            service-id: authorization-server #服务的spring.application.name(所以前面说了个属性很重要，要注意) ant风格路径表达式，只能匹配一个层级\r\n            path: /authorization-server/**\r\n            #stripPrefix: true #如果stripPrefix=false，则去掉/ribbon，转发的请求是/**；如果为true，转发的请求是/ribbon/**\r\n        authentication-server: #自定义名称\r\n            service-id: authentication-server #服务的spring.application.name(所以前面说了个属性很重要，要注意) ant风格路径表达式，只能匹配一个层级\r\n            path: /authentication-server/**\r\n            #stripPrefix: true #如果stripPrefix=false，则去掉/feign，转发的请求是/**；如果为true，转发的请求是/feign/** ?????还没解决\r\n\r\n#如果您通过指定URL配置了Zuul路由，则需要使用\r\n    max:\r\n        host:\r\n            connections: 500\r\n    host:\r\n        socket-timeout-millis: 60000\r\n        connect-timeout-millis: 60000\r\n#如果Zuul使用服务发现，则需要使用\r\nribbon:\r\n    ReadTimeout: 60000\r\n    ConnectTimeout: 60000\r\n\r\n#熔断机制超时\r\nhystrix:\r\n    command:\r\n        default:\r\n            execution:\r\n                timeout:\r\n                    enabled: true\r\n                isolation:\r\n                    thread:\r\n                        timeoutInMilliseconds: 240000\r\nname: zuul  #测试用', 'f6610eeae6eeab8d3dcaa77209c696d5', '2020-06-27 06:39:22', '2020-06-27 06:39:22', NULL, '116.22.163.190', '', 'a4d0cf40-1125-4263-81e5-3f628bc90302', NULL, NULL, NULL, 'yaml', NULL);
INSERT INTO `config_info` VALUES (5, 'gateway-web-dev.yml', 'blog', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\nserver:\r\n    port: 9800 # 启动端口\r\nspring:\r\n    application:\r\n        name: gateway-web\r\n    cloud:\r\n        nacos:\r\n            discovery: #nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n                namespace: a4d0cf40-1125-4263-81e5-3f628bc90302 # 命名空间ID\r\n                #group: blog # 配置管理Group\r\n            config: #nacos配置中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #网关配置\r\n        gateway:\r\n            #默认的全局过滤器\r\n            default-filters:\r\n            discovery:\r\n                locator:\r\n                    enabled: true #注册中心生效，可以自动根据注册中心的服务名进行路由转发\r\n            routes: #路由配置，实际生产环境需要做到动态路由配置（而不需要像以下配置routes）\r\n                ##authorization-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9777/   或者注册服务serviceId的方式： lb://ribbon-consumer\r\n                -   id: authorization-server #路由的唯一id\r\n                    uri: lb://authorization-server\r\n                    predicates: #断言，即路由的规则\r\n                        - Path=/authorization-server/**\r\n                    filters: #过滤器\r\n                        - StripPrefix=1 #url截取的个数 本例会把/authorization-server截掉，截掉后的部分才是转发的url路径\r\n                ##authentication-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9779/   或者注册服务serviceId的方式： lb://feign-consumer\r\n                -   id: authentication-server\r\n                    uri: lb://authentication-server\r\n                    predicates:\r\n                        - Path=/authentication-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: admin-user\r\n                    uri: lb://admin-user\r\n                    predicates:\r\n                        - Path=/admin-user/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: article-admin\r\n                    uri: lb://article-admin\r\n                    predicates:\r\n                        - Path=/article-admin/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: file-server\r\n                    uri: lb://file-server\r\n                    predicates:\r\n                        - Path=/file-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n        # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    zipkin:\r\n        enabled: true #默认允许开启\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar包安装运行\r\n        sender:\r\n            type: web #当配置了base-url，此项可不配置，默认使用http方式收集包安装运行\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n      sampler:\r\n          # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n          probability: 1\r\n    #profiles:\r\n    #    active: dev # 根据不同环境切换配置环境\r\nname: gateway-web  #测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\n#logging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n#    config: classpath:logback-logstash.xml\r\n## 忽视鉴权的url\r\ngateway:\r\n    ignore:\r\n        authentication:\r\n            url: /oauth/,/v3/api-docs,/favor.ioc #/oauth/ Oauth2授权端点    /v3/api-docs Swagger3接口页面的端点', 'f91fcdbd245744cc14071461659a1af6', '2020-06-27 06:39:22', '2020-09-11 02:24:16', NULL, '116.21.13.15', '', 'a4d0cf40-1125-4263-81e5-3f628bc90302', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (6, 'article-admin-dev.yml', 'blog', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.article\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 博客文章管理api\r\n            description: 博客文章管理接口\r\n            version: 2.0\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9804 # 启动端口\r\nspring:\r\n    application:\r\n        name: article-admin\r\n    cloud:\r\n        nacos:\r\n            discovery: # nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n            config: # nacos配置中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8080 #控制台的地址\r\n    profiles:\r\n        active: dev # 根据不同环境切换配置环境\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/weblog?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n        max-idle: 5\r\n        # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        enabled: true #默认允许开启\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar包安装运行\r\n        sender:\r\n            type: web #当配置了base-url，此项可不配置，默认使用http方式收集\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n        sampler:\r\n            # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n            probability: 1\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    #实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.article.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        # mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\nname: article-admin  # 测试用\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml\r\n# xxl-job配置参数\r\nxxl: \r\n    job: \r\n        admin: ### 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行\"执行器心跳注册\"和\"任务结果回调\"；为空则关闭自动注册；\r\n            addresses: http://129.211.34.120:9090/xxl-job-admin\r\n        executor: ### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册\r\n            appname: article-admin\r\n            port: 9005', 'ceef0e84ab98ab77600a3dd35421e2a6', '2020-06-27 06:39:22', '2020-09-11 02:24:32', NULL, '116.21.13.15', '', 'a4d0cf40-1125-4263-81e5-3f628bc90302', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (7, 'file-server-dev.yml', 'blog', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.file\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 文件服务器管理api\r\n            description: 文件服务器管理接口\r\n            version: 2.0\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9805 # 启动端口\r\nspring:\r\n    application:\r\n        name: file-server\r\n    cloud:\r\n        nacos:\r\n            discovery: # nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n            config: # nacos配置中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8080 #控制台的地址\r\n    profiles:\r\n        active: dev # 根据不同环境切换配置环境\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        enabled: true #默认允许开启\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar包安装运行\r\n        sender:\r\n            type: web #当配置了base-url，此项可不配置，默认使用http方式收集\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n        sampler:\r\n            # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n            probability: 1\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\nname: file-server  # 测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\n##logger_name:o.s.c.b.c.PropertySourceBootstrapConfiguration - [TID: N/A] - message:Error opening logging config file classpath:logback-logstash.xml\r\n #java.lang.IllegalStateException: Logback configuration error detected:\r\n #ERROR in ch.qos.logback.classic.joran.action.ContextNameAction - Failed to rename context [nacos] as [logback] java.lang.IllegalStateException: Context has been already given a name\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件，假如本地不配置这个，会出现上面的报错信息\r\n    config: classpath:logback-logstash.xml\r\n# 七牛云配置参数\r\nqiniu:\r\n    accessKey: iNffcCO5SH8qw-GgV9L_QGbTH2_xLgEVdZIsq6nW\r\n    secretKey: NSNHLflVqXkOM86sEvxbTew3LEX2fCUf-ifQU5TI\r\n    bucket: huijunzeng\r\n    path: www.baidu.com  # 外链域名\r\n', '19176ef1f04344ef776f0fda26dec2e4', '2020-06-27 06:39:22', '2020-09-11 02:23:15', NULL, '116.21.13.15', '', 'a4d0cf40-1125-4263-81e5-3f628bc90302', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (8, 'sharding-jdbc-mybatisplus-dev.yml', 'blog', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.demo\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: sharding分表分库demo api\r\n            description: sharding分表分库demo接口\r\n            version: 2.0\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9903 # 启动端口\r\nspring:\r\n    application:\r\n        name: sharding-jdbc-mybatisplus\r\n    cloud:\r\n        #nacos注册中心地址配置\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n   \r\n    # 配置sharding-jdbc分表分库\r\n    shardingsphere:\r\n        props:\r\n            # 打印sql\r\n            sql.show: true\r\n            check:\r\n                table:\r\n                    metadata:\r\n                        # 是否在启动时检查分表元数据一致性\r\n                        enabled: false\r\n        # 分库 数据源配置\r\n        datasource:\r\n            # 数据源汇总 这里案例使用三个数据库\r\n            names: db0,db1,db2\r\n            db0:\r\n                type: com.zaxxer.hikari.HikariDataSource\r\n                hikari:\r\n                    minimum-idle: 10 # 池中维护的最小空闲连接数\r\n                    idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n                    maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n                    auto-commit: true # 自动提交从池中返回的连接\r\n                    pool-name: HikariCP # 连接池的用户定义名称\r\n                    max-lifetime: 600000 # 池中连接最长生命周期\r\n                    connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n                    connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n                driver-class-name: com.mysql.cj.jdbc.Driver\r\n                jdbcUrl: jdbc:mysql://129.211.34.120:3306/db0?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n                username: root\r\n                password: zeng@19940125...\r\n            db1:\r\n                type: com.zaxxer.hikari.HikariDataSource\r\n                hikari:\r\n                    minimum-idle: 10 # 池中维护的最小空闲连接数\r\n                    idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n                    maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n                    auto-commit: true # 自动提交从池中返回的连接\r\n                    pool-name: HikariCP # 连接池的用户定义名称\r\n                    max-lifetime: 600000 # 池中连接最长生命周期\r\n                    connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n                    connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n                driver-class-name: com.mysql.cj.jdbc.Driver\r\n                jdbcUrl: jdbc:mysql://129.211.34.120:3306/db1?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n                username: root\r\n                password: zeng@19940125...\r\n            db2:\r\n                type: com.zaxxer.hikari.HikariDataSource\r\n                hikari:\r\n                    minimum-idle: 10 # 池中维护的最小空闲连接数\r\n                    idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n                    maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n                    auto-commit: true # 自动提交从池中返回的连接\r\n                    pool-name: HikariCP # 连接池的用户定义名称\r\n                    max-lifetime: 600000 # 池中连接最长生命周期\r\n                    connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n                    connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n                driver-class-name: com.mysql.cj.jdbc.Driver\r\n                jdbcUrl: jdbc:mysql://129.211.34.120:3306/db2?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n                username: root\r\n                password: zeng@19940125...\r\n        # 分片规则\r\n        sharding:\r\n            # 默认数据源\r\n            default-data-source-name: db0\r\n            # 默认主键生成策略\r\n            default-key-generator:\r\n                type: SNOWFLAKE\r\n                column: id\r\n                worker:\r\n                    id: order # 雪花算法workid\r\n                max:\r\n                    tolerate:\r\n                        time:\r\n                            difference:\r\n                                milliseconds: 1\r\n            # 默认分库策略 根据用户id取模\r\n            default-database-strategy:\r\n                inline:\r\n                    sharding-column: user_id #分片列名  属性不能是String,只能是整型\r\n                    algorithm-expression: db$->{user_id % 3}  #分库算法Inline表达式，需要符合groovy动态语法\r\n            # 广播表 一些静态信息表。 广播分发到每一个数据源，方便查询join。例如：订单字典表\r\n            broadcast-tables:\r\n               - t_dict\r\n            # 绑定表关系 分片策略相同的表，即可建立绑定关系  多个以逗号分隔\r\n            bindingTables:\r\n                - t_order,t_order_item\r\n            # 具体表策略\r\n            tables:\r\n                # 字典表（广播表，配置在基础库db中）\r\n                # t_dict:\r\n                #     actual-data-nodes: db.t_dict\r\n                # 订单表 根据订单id取模\r\n                t_order:\r\n                    # 共9个节点 db0.t_order_0,db0.t_order_1,db0.t_order_2,db1.t_order_0,db1.t_order_1,db1.t_order_2,db2.t_order_0,db2.t_order_1,db2.t_order_2\r\n                    actual-data-nodes: db$->{0..2}.t_order_$->{0..2}\r\n                    table-strategy:\r\n                        inline:\r\n                            sharding-column: id #分片列名  属性不能是String,只能是整型\r\n                            algorithm-expression: t_order_$->{id % 3} #分库算法Inline表达式，需要符合groovy动态语法\r\n                    key-generator:\r\n                            type: SNOWFLAKE\r\n                            column: id\r\n                # 订单表详情 根据订单id取模\r\n                t_order_item:\r\n                    actual-data-nodes: db$->{0..2}.t_order_item_$->{0..2}\r\n                    table-strategy:\r\n                        inline:\r\n                            sharding-column: order_id #分片列名  属性不能是String,只能是整型\r\n                            algorithm-expression: t_order_item_$->{order_id % 3} #分库算法Inline表达式，需要符合groovy动态语法\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        enabled: false #关闭，demo案例不需配置\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n        sampler:\r\n            # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n            probability: 1\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    # 实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.demo.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        #mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\nname: sharding-jdbc-mybatisplus  # 测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml', '3b195b8811bcfaa3403df12cf5b905e5', '2020-06-27 06:39:22', '2020-09-11 02:18:00', NULL, '116.21.13.15', '', 'a4d0cf40-1125-4263-81e5-3f628bc90302', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (9, 'distributed-transaction-rabbitmq-consumer-dev.yml', 'blog', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.demo\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 分布式事务demo api\r\n            description: 分布式事务demo接口\r\n            version: 2.0\r\n        rabbitmq:\r\n            points-queue: points.queue\r\n            points-retry-queue: points.retry.queue\r\n            points-route-key: points.route.key\r\n            points-exchange: points.exchange\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9901 # 启动端口\r\nspring:\r\n    application:\r\n        name: distributed-transaction-rabbitmq-consumer\r\n    cloud:\r\n        #nacos注册中心地址配置\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/distributed-transaction-rabbitmq-consumer?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        enabled: false #关闭，demo案例不需配置\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n        sampler:\r\n            # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n            probability: 1\r\n    #rabbitmq配置\r\n    rabbitmq:\r\n        host: 129.211.34.120 #ip\r\n        port: 5672 #端口\r\n        username: admin #用户名\r\n        password: zeng@19940125... #密码\r\n        virtual-host: / #虚拟主机 每个virtual-host相当于一个相对独立的RabbitMQ服务器，每个virtual-host之间是相互隔离的\r\n        listener:\r\n            simple:\r\n                retry:\r\n                    enabled: false #监听重试是否可用\r\n                    max-attempts: 5 #最大重试次数\r\n                    initial-interval: 3000 #重试间隔次数\r\n                acknowledge-mode: manual #消息确认方式,开启手动ack确认\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    #实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.demo.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        # mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\nname: distributed-transaction-rabbitmq-consumer  # 测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml', 'b00dbaf32f1dc4d890468fff4727e696', '2020-06-27 06:39:22', '2020-09-11 02:16:47', NULL, '116.21.13.15', '', 'a4d0cf40-1125-4263-81e5-3f628bc90302', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (10, 'distributed-transaction-rabbitmq-producer-dev.yml', 'blog', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.demo\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 分布式事务demo api\r\n            description: 分布式事务demo接口\r\n            version: 2.0\r\n        rabbitmq:\r\n            points-queue: points.queue\r\n            points-retry-queue: points.retry.queue\r\n            points-route-key: points.route.key\r\n            points-exchange: points.exchange\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9900 # 启动端口\r\nspring:\r\n    application:\r\n        name: distributed-transaction-rabbitmq-producer\r\n    cloud:\r\n        #nacos注册中心地址配置\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/distributed-transaction-rabbitmq-producer?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        enabled: false #关闭，demo案例不需配置\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n        sampler:\r\n            # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n            probability: 1\r\n    #rabbitmq配置\r\n    rabbitmq:\r\n        host: 129.211.34.120 #ip\r\n        port: 5672 #端口\r\n        username: admin #用户名\r\n        password: zeng@19940125... #密码\r\n        virtual-host: / #虚拟主机 每个virtual-host相当于一个相对独立的RabbitMQ服务器，每个virtual-host之间是相互隔离的\r\n        publisher-returns: true #消息接收确认\r\n        publisher-confirm-type: correlated #确认回调\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    #实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.demo.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        # mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\nname: distributed-transaction-rabbitmq-producer  # 测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml\r\n', '8a849a9dc5c3de57fff80522d8727121', '2020-06-27 06:39:22', '2020-09-11 02:17:41', NULL, '116.21.13.15', '', 'a4d0cf40-1125-4263-81e5-3f628bc90302', '', '', '', 'yaml', '');
INSERT INTO `config_info` VALUES (11, 'logback-logstash.xml', 'blog', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<configuration debug=\"false\" scan=\"true\" scanPeriod=\"60 seconds\">\r\n\r\n    <!-- 读取spring容器中的spring.application.name属性 -->\r\n    <springProperty scope=\"context\" name=\"appName\" source=\"spring.application.name\" />\r\n    <!-- 线上linux环境 docker部署，所以需要将这个路径挂载到宿主机中filebeat挂载的日志收集路径 -->\r\n    <property name=\"logback.logDir\" value=\"/logs\"/>\r\n    <!-- 本地windows开发环境配置 不设置绝对路径时，默认在系统用户路径下 -->\r\n    <!--<property name=\"logback.logDir\" value=\"E:\\\\filebeat-6.8.2-windows-x86_64\\\\filebeat-6.8.2-windows-x86_64\\\\data\"/>-->\r\n    <!-- 日志输出编码格式化 -->\r\n    <property name=\"charset\" value=\"UTF-8\"/>\r\n    <!-- 日志保留时长，设置只保留最近15天的日志 -->\r\n    <property name=\"maxHistory\" value=\"15\"/>\r\n    <!--\r\n        结合Sleuth自定义日志输出格式：\r\n        %yellow() 指定颜色，需要用括号把内容括起来\r\n        %d——日志输出时间 标准年月日时分秒格式\r\n        %thread——输出日志的进程名字\r\n        %-5level——日志级别，并且使用5个字符靠左对齐\r\n        ${appName}——spring配置文件的spring.application.name属性值\r\n        %X{X-B3-TraceId}——Sleuth的traceId为一个请求分配的追踪ID号，用来标识一条请求链路。\r\n        %X{X-B3-SpanId}——Sleuth的spanId表示一个基本的工作单元，一个请求可以包含多个步骤，每个步骤都拥有自己的spanId。一个请求包含一个TraceId，多个SpanId\r\n        %X{X-Span-Export}——是否将Sleuth链路信息传输到Zipkin\r\n        %logger{50}——日志输出者的名字\r\n         %line——log在代码中埋点的行数\r\n        %msg——日志消息\r\n        %n——平台的换行符\r\n    -->\r\n    <property name=\"consoleLogPattern\"\r\n              value=\"%d %yellow(%-5level [${appName},%X{X-B3-TraceId},%X{X-B3-SpanId},%X{X-Span-Export}]) [%thread] %green(%logger{50}) %line : %msg%n\"/>\r\n\r\n    <!-- 格式化日志输出节点 -->\r\n    <!-- 自定义控制台打印设置 -->\r\n    <appender name=\"consoleAppender\" class=\"ch.qos.logback.core.ConsoleAppender\">\r\n        <encoder class=\"ch.qos.logback.core.encoder.LayoutWrappingEncoder\">\r\n            <layout class=\"ch.qos.logback.classic.PatternLayout\">\r\n                <pattern>${consoleLogPattern}</pattern>\r\n            </layout>\r\n        </encoder>\r\n    </appender>\r\n\r\n    <!-- 日志系统设置 -->\r\n    <!-- info级别的日志输出配置 -->\r\n    <appender name=\"fileInfoLog\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\r\n        <!-- 如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，\r\n            所以我们使用下面的策略，可以避免输出 Error 的日志 -->\r\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\r\n            <!-- 过滤 Error -->\r\n            <level>ERROR</level>\r\n            <!-- 匹配到就禁止 -->\r\n            <onMatch>DENY</onMatch>\r\n            <!-- 没有匹配到就允许 -->\r\n            <onMismatch>ACCEPT</onMismatch>\r\n        </filter>\r\n        <!-- 日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则\r\n            如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天\r\n            的日志改名为今天的日期。即，<File> 的日志都是当天的。\r\n        -->\r\n        <File>${logback.logDir}/info.${appName}.log</File>\r\n        <!-- 滚动策略，按照时间滚动 TimeBasedRollingPolicy -->\r\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\r\n            <!-- 文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->\r\n            <FileNamePattern>${logback.logDir}/info.${appName}.%d{yyyy-MM-dd}.log</FileNamePattern>\r\n            <!-- 日志保留时长 -->\r\n            <maxHistory>${maxHistory}</maxHistory>\r\n        </rollingPolicy>\r\n        <!-- 日志输出编码格式化 -->\r\n        <encoder>\r\n            <charset>${charset}</charset>\r\n            <pattern>${consoleLogPattern}</pattern>\r\n        </encoder>\r\n    </appender>\r\n\r\n    <!-- error级别的日志输出配置 -->\r\n    <appender name=\"fileErrorLog\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\r\n        <!-- 如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter -->\r\n        <filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\r\n            <level>Error</level>\r\n        </filter>\r\n        <!-- 日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则\r\n            如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天\r\n            的日志改名为今天的日期。即，<File> 的日志都是当天的。\r\n        -->\r\n        <File>${logback.logDir}/error.${appName}.log</File>\r\n        <!-- 滚动策略，按照时间滚动 TimeBasedRollingPolicy -->\r\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\r\n            <!-- 文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->\r\n            <FileNamePattern>${logback.logDir}/error.${appName}.%d{yyyy-MM-dd}.log</FileNamePattern>\r\n            <!-- 日志保留时长 -->\r\n            <maxHistory>${maxHistory}</maxHistory>\r\n        </rollingPolicy>\r\n        <!-- 日志输出编码格式化 -->\r\n        <encoder>\r\n            <charset>${charset}</charset>\r\n            <pattern>${consoleLogPattern}</pattern>\r\n        </encoder>\r\n    </appender>\r\n\r\n    <!-- 用来指定最基础的日志输出级别 -->\r\n    <root level=\"info\">\r\n        <appender-ref ref=\"consoleAppender\" />\r\n        <appender-ref ref=\"fileInfoLog\"/>\r\n        <appender-ref ref=\"fileErrorLog\"/>\r\n    </root>\r\n</configuration>', '5942e204051535e59fb8a9b16b002757', '2020-06-27 06:39:22', '2020-09-11 01:21:42', NULL, '116.21.13.15', '', 'a4d0cf40-1125-4263-81e5-3f628bc90302', 'logback日志配置文件，nacos配置中心读取不了，必须要在工程resource目录下创建', '', '', 'xml', '');
INSERT INTO `config_info` VALUES (17, 'admin-user-sentinel-flow-rules', 'blog', '[\r\n    {\r\n        \"resource\": \"/role\",\r\n        \"limitApp\": \"admin-user\",\r\n        \"grade\": 1,\r\n        \"count\": 2,\r\n        \"strategy\": 0,\r\n        \"controlBehavior\": 0,\r\n        \"clusterMode\": false\r\n    },\r\n    {\r\n        \"resource\": \"/role/all\",\r\n        \"limitApp\": \"admin-user\",\r\n        \"grade\": 1,\r\n        \"count\": 2,\r\n        \"strategy\": 0,\r\n        \"controlBehavior\": 0,\r\n        \"clusterMode\": false\r\n    }\r\n]', 'bf0827633b9047cb3b5cad6f5e7193e2', '2020-07-14 11:03:04', '2020-07-17 03:37:18', NULL, '113.67.11.60', '', 'a4d0cf40-1125-4263-81e5-3f628bc90302', '顺序对应的字段解释：资源名;调用来源，default为不区分调用来源;限流阈值类型(QPS或并发线程数)；0根据并发数量来限流，1根据QPS来进行流量控制；限流阈值；调用关系限流策略；流量控制效果(直接拒绝、Warm Up、匀速排队)；是否为集群模式', '', '', 'json', '');
INSERT INTO `config_info` VALUES (36, 'admin-user-sentinel-degrade-rules', 'blog', '[\r\n    {\r\n		\"resource\": \"test1\",\r\n		\"grade\": 0,\r\n		\"count\": 20.0,\r\n		\"timeWindow\": 60\r\n	}\r\n]', '58e2f40d1d5faea2486ea0f532c8f488', '2020-07-17 00:59:29', '2020-07-17 01:22:30', NULL, '113.67.11.60', '', 'a4d0cf40-1125-4263-81e5-3f628bc90302', '', '', '', 'json', '');

-- ----------------------------
-- Table structure for config_info_aggr
-- ----------------------------
DROP TABLE IF EXISTS `config_info_aggr`;
CREATE TABLE `config_info_aggr`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `datum_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'datum_id',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT '内容',
  `gmt_modified` datetime(0) NOT NULL COMMENT '修改时间',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_configinfoaggr_datagrouptenantdatum`(`data_id`, `group_id`, `tenant_id`, `datum_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '增加租户字段' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for config_info_beta
-- ----------------------------
DROP TABLE IF EXISTS `config_info_beta`;
CREATE TABLE `config_info_beta`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'app_name',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'content',
  `beta_ips` varchar(1024) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'betaIps',
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'source user',
  `src_ip` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'source ip',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_configinfobeta_datagrouptenant`(`data_id`, `group_id`, `tenant_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'config_info_beta' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for config_info_tag
-- ----------------------------
DROP TABLE IF EXISTS `config_info_tag`;
CREATE TABLE `config_info_tag`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT 'tenant_id',
  `tag_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'tag_id',
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'app_name',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'content',
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'md5',
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin NULL COMMENT 'source user',
  `src_ip` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'source ip',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_configinfotag_datagrouptenanttag`(`data_id`, `group_id`, `tenant_id`, `tag_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'config_info_tag' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for config_tags_relation
-- ----------------------------
DROP TABLE IF EXISTS `config_tags_relation`;
CREATE TABLE `config_tags_relation`  (
  `id` bigint(20) NOT NULL COMMENT 'id',
  `tag_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'tag_name',
  `tag_type` varchar(64) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'tag_type',
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'data_id',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'group_id',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT 'tenant_id',
  `nid` bigint(20) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`nid`) USING BTREE,
  UNIQUE INDEX `uk_configtagrelation_configidtag`(`id`, `tag_name`, `tag_type`) USING BTREE,
  INDEX `idx_tenant_id`(`tenant_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'config_tag_relation' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for group_capacity
-- ----------------------------
DROP TABLE IF EXISTS `group_capacity`;
CREATE TABLE `group_capacity`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整个集群',
  `quota` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '配额，0表示使用默认值',
  `usage` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '使用量',
  `max_size` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '聚合子配置最大个数，，0表示使用默认值',
  `max_aggr_size` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '最大变更历史数量',
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_group_id`(`group_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '集群、各Group容量信息表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for his_config_info
-- ----------------------------
DROP TABLE IF EXISTS `his_config_info`;
CREATE TABLE `his_config_info`  (
  `id` bigint(64) UNSIGNED NOT NULL,
  `nid` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `data_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `group_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `app_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'app_name',
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `md5` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `src_user` text CHARACTER SET utf8 COLLATE utf8_bin NULL,
  `src_ip` varchar(20) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `op_type` char(10) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL,
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT '租户字段',
  PRIMARY KEY (`nid`) USING BTREE,
  INDEX `idx_gmt_create`(`gmt_create`) USING BTREE,
  INDEX `idx_gmt_modified`(`gmt_modified`) USING BTREE,
  INDEX `idx_did`(`data_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 88 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '多租户改造' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of his_config_info
-- ----------------------------
INSERT INTO `his_config_info` VALUES (5, 52, 'gateway-web-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\nserver:\r\n    port: 9800 # 启动端口\r\nspring:\r\n    application:\r\n        name: gateway-web\r\n    cloud:\r\n        nacos:\r\n            discovery: #nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n                namespace: a4d0cf40-1125-4263-81e5-3f628bc90302 # 命名空间ID\r\n                #group: blog # 配置管理Group\r\n            config: #nacos配置中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #网关配置\r\n        gateway:\r\n            #默认的全局过滤器\r\n            default-filters:\r\n            discovery:\r\n                locator:\r\n                    enabled: true #注册中心生效，可以自动根据注册中心的服务名进行路由转发\r\n            routes: #路由配置，实际生产环境需要做到动态路由配置（而不需要像以下配置routes）\r\n                ##authorization-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9777/   或者注册服务serviceId的方式： lb://ribbon-consumer\r\n                -   id: authorization-server #路由的唯一id\r\n                    uri: lb://authorization-server\r\n                    predicates: #断言，即路由的规则\r\n                        - Path=/authorization-server/**\r\n                    filters: #过滤器\r\n                        - StripPrefix=1 #url截取的个数 本例会把/authorization-server截掉，截掉后的部分才是转发的url路径\r\n                ##authentication-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9779/   或者注册服务serviceId的方式： lb://feign-consumer\r\n                -   id: authentication-server\r\n                    uri: lb://authentication-server\r\n                    predicates:\r\n                        - Path=/authentication-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: admin-user\r\n                    uri: lb://admin-user\r\n                    predicates:\r\n                        - Path=/admin-user/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: article-admin\r\n                    uri: lb://article-admin\r\n                    predicates:\r\n                        - Path=/article-admin/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: file-server\r\n                    uri: lb://file-server\r\n                    predicates:\r\n                        - Path=/file-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n        # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    #profiles:\r\n    #    active: dev # 根据不同环境切换配置环境\r\nname: gateway-web  #测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml\r\n## 忽视鉴权的url\r\ngateway:\r\n    ignore:\r\n        authentication:\r\n            url: /oauth/,/v2/api-docs,/favor.ioc #/oauth/ Oauth2授权端点    /v2/api-docs Swagger2接口页面的端点', 'ba282292deb601911ba58f0df7cdcd25', '2020-09-04 17:29:23', '2020-09-04 04:29:23', NULL, '116.21.14.135', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (3, 53, 'admin-user-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.user\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 后台用户管理api\r\n            description: 后台用户管理接口\r\n            version: 2.0\r\n            name: ZJH\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9803 # 启动端口\r\nspring:\r\n    application:\r\n        name: admin-user\r\n    #nacos注册中心地址配置\r\n    cloud:\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口 可不提供，默认为 8719，若端口冲突会自动向下探测可用的端口\r\n                dashboard: 129.211.34.120:8088 #控制台的地址  \r\n            datasource:\r\n                ds_flow: #读取nacos数据源的sentinel流控规则 admin-user-sentinel-flow-rules+DEFAULT_GROUP+a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-flow-rules #需要在nacos上面配置这个名称的json格式流控规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: flow\r\n                ds_degrade: #读取nacos数据源的sentinel降级规则\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-degrade-rules #需要在nacos上面配置这个名称的json格式降级规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: degrade\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    #实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.user.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        # mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n##feign使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml', '5ab5c154e7afd871f0a146ea69868974', '2020-09-07 11:54:40', '2020-09-06 22:54:40', NULL, '59.42.237.245', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (3, 54, 'admin-user-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            apiBasePackage: com.teeya.user\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 后台用户管理api\r\n            description: 后台用户管理接口\r\n            version: 2.0\r\n            name: ZJH\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9803 # 启动端口\r\nspring:\r\n    application:\r\n        name: admin-user\r\n    #nacos注册中心地址配置\r\n    cloud:\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口 可不提供，默认为 8719，若端口冲突会自动向下探测可用的端口\r\n                dashboard: 129.211.34.120:8088 #控制台的地址  \r\n            datasource:\r\n                ds_flow: #读取nacos数据源的sentinel流控规则 admin-user-sentinel-flow-rules+DEFAULT_GROUP+a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-flow-rules #需要在nacos上面配置这个名称的json格式流控规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: flow\r\n                ds_degrade: #读取nacos数据源的sentinel降级规则\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-degrade-rules #需要在nacos上面配置这个名称的json格式降级规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: degrade\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    #实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.user.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        # mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n##feign使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml', '14c086423014e62b2cfc33a03735bad7', '2020-09-07 13:18:32', '2020-09-07 00:18:33', NULL, '59.42.237.245', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (3, 55, 'admin-user-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.user\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 后台用户管理api\r\n            description: 后台用户管理接口\r\n            version: 2.0\r\n            name: ZJH\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9803 # 启动端口\r\nspring:\r\n    application:\r\n        name: admin-user\r\n    #nacos注册中心地址配置\r\n    cloud:\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口 可不提供，默认为 8719，若端口冲突会自动向下探测可用的端口\r\n                dashboard: 129.211.34.120:8088 #控制台的地址  \r\n            datasource:\r\n                ds_flow: #读取nacos数据源的sentinel流控规则 admin-user-sentinel-flow-rules+DEFAULT_GROUP+a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-flow-rules #需要在nacos上面配置这个名称的json格式流控规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: flow\r\n                ds_degrade: #读取nacos数据源的sentinel降级规则\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-degrade-rules #需要在nacos上面配置这个名称的json格式降级规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: degrade\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    #实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.user.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        # mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n##feign使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml', '5ab5c154e7afd871f0a146ea69868974', '2020-09-07 14:08:57', '2020-09-07 01:08:57', NULL, '59.42.237.245', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (5, 56, 'gateway-web-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\nserver:\r\n    port: 9800 # 启动端口\r\nspring:\r\n    application:\r\n        name: gateway-web\r\n    cloud:\r\n        nacos:\r\n            discovery: #nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n                namespace: a4d0cf40-1125-4263-81e5-3f628bc90302 # 命名空间ID\r\n                #group: blog # 配置管理Group\r\n            config: #nacos配置中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #网关配置\r\n        gateway:\r\n            #默认的全局过滤器\r\n            default-filters:\r\n            discovery:\r\n                locator:\r\n                    enabled: true #注册中心生效，可以自动根据注册中心的服务名进行路由转发\r\n            routes: #路由配置，实际生产环境需要做到动态路由配置（而不需要像以下配置routes）\r\n                ##authorization-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9777/   或者注册服务serviceId的方式： lb://ribbon-consumer\r\n                -   id: authorization-server #路由的唯一id\r\n                    uri: lb://authorization-server\r\n                    predicates: #断言，即路由的规则\r\n                        - Path=/authorization-server/**\r\n                    filters: #过滤器\r\n                        - StripPrefix=1 #url截取的个数 本例会把/authorization-server截掉，截掉后的部分才是转发的url路径\r\n                ##authentication-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9779/   或者注册服务serviceId的方式： lb://feign-consumer\r\n                -   id: authentication-server\r\n                    uri: lb://authentication-server\r\n                    predicates:\r\n                        - Path=/authentication-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: admin-user\r\n                    uri: lb://admin-user\r\n                    predicates:\r\n                        - Path=/admin-user/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: article-admin\r\n                    uri: lb://article-admin\r\n                    predicates:\r\n                        - Path=/article-admin/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: file-server\r\n                    uri: lb://file-server\r\n                    predicates:\r\n                        - Path=/file-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n        # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    #profiles:\r\n    #    active: dev # 根据不同环境切换配置环境\r\nname: gateway-web  #测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml\r\n## 忽视鉴权的url\r\ngateway:\r\n    ignore:\r\n        authentication:\r\n            url: /oauth/,/v3/api-docs,/favor.ioc #/oauth/ Oauth2授权端点    /v3/api-docs Swagger3接口页面的端点', 'bda3ca2bd90df1357075b0e955b5f425', '2020-09-11 09:33:03', '2020-09-10 20:33:03', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (5, 57, 'gateway-web-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\nserver:\r\n    port: 9800 # 启动端口\r\nspring:\r\n    application:\r\n        name: gateway-web\r\n    cloud:\r\n        nacos:\r\n            discovery: #nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n                namespace: a4d0cf40-1125-4263-81e5-3f628bc90302 # 命名空间ID\r\n                #group: blog # 配置管理Group\r\n            config: #nacos配置中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #网关配置\r\n        gateway:\r\n            #默认的全局过滤器\r\n            default-filters:\r\n            discovery:\r\n                locator:\r\n                    enabled: true #注册中心生效，可以自动根据注册中心的服务名进行路由转发\r\n            routes: #路由配置，实际生产环境需要做到动态路由配置（而不需要像以下配置routes）\r\n                ##authorization-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9777/   或者注册服务serviceId的方式： lb://ribbon-consumer\r\n                -   id: authorization-server #路由的唯一id\r\n                    uri: lb://authorization-server\r\n                    predicates: #断言，即路由的规则\r\n                        - Path=/authorization-server/**\r\n                    filters: #过滤器\r\n                        - StripPrefix=1 #url截取的个数 本例会把/authorization-server截掉，截掉后的部分才是转发的url路径\r\n                ##authentication-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9779/   或者注册服务serviceId的方式： lb://feign-consumer\r\n                -   id: authentication-server\r\n                    uri: lb://authentication-server\r\n                    predicates:\r\n                        - Path=/authentication-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: admin-user\r\n                    uri: lb://admin-user\r\n                    predicates:\r\n                        - Path=/admin-user/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: article-admin\r\n                    uri: lb://article-admin\r\n                    predicates:\r\n                        - Path=/article-admin/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: file-server\r\n                    uri: lb://file-server\r\n                    predicates:\r\n                        - Path=/file-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n        # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    zipkin:\r\n        base-url: http://localhost:9411/ #zipkin服务器地址 自行到zipkin官网下载jar包安装运行\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n      sampler:\r\n          # 设置采集日志的百分比 1代表100%采集；可依据环境以及实际情况设置\r\n          probability: 1\r\n    #profiles:\r\n    #    active: dev # 根据不同环境切换配置环境\r\nname: gateway-web  #测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml\r\n## 忽视鉴权的url\r\ngateway:\r\n    ignore:\r\n        authentication:\r\n            url: /oauth/,/v3/api-docs,/favor.ioc #/oauth/ Oauth2授权端点    /v3/api-docs Swagger3接口页面的端点', '15eaff55a7287eb48b9e247fd682e6f3', '2020-09-11 09:34:10', '2020-09-10 20:34:11', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (5, 58, 'gateway-web-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\nserver:\r\n    port: 9800 # 启动端口\r\nspring:\r\n    application:\r\n        name: gateway-web\r\n    cloud:\r\n        nacos:\r\n            discovery: #nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n                namespace: a4d0cf40-1125-4263-81e5-3f628bc90302 # 命名空间ID\r\n                #group: blog # 配置管理Group\r\n            config: #nacos配置中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #网关配置\r\n        gateway:\r\n            #默认的全局过滤器\r\n            default-filters:\r\n            discovery:\r\n                locator:\r\n                    enabled: true #注册中心生效，可以自动根据注册中心的服务名进行路由转发\r\n            routes: #路由配置，实际生产环境需要做到动态路由配置（而不需要像以下配置routes）\r\n                ##authorization-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9777/   或者注册服务serviceId的方式： lb://ribbon-consumer\r\n                -   id: authorization-server #路由的唯一id\r\n                    uri: lb://authorization-server\r\n                    predicates: #断言，即路由的规则\r\n                        - Path=/authorization-server/**\r\n                    filters: #过滤器\r\n                        - StripPrefix=1 #url截取的个数 本例会把/authorization-server截掉，截掉后的部分才是转发的url路径\r\n                ##authentication-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9779/   或者注册服务serviceId的方式： lb://feign-consumer\r\n                -   id: authentication-server\r\n                    uri: lb://authentication-server\r\n                    predicates:\r\n                        - Path=/authentication-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: admin-user\r\n                    uri: lb://admin-user\r\n                    predicates:\r\n                        - Path=/admin-user/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: article-admin\r\n                    uri: lb://article-admin\r\n                    predicates:\r\n                        - Path=/article-admin/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: file-server\r\n                    uri: lb://file-server\r\n                    predicates:\r\n                        - Path=/file-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n        # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    zipkin:\r\n        base-url: http://129.211.34.120/:9411/ #zipkin服务器地址 自行到zipkin官网下载jar包安装运行\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n      sampler:\r\n          # 设置采集日志的百分比 1代表100%采集；可依据环境以及实际情况设置\r\n          probability: 1\r\n    #profiles:\r\n    #    active: dev # 根据不同环境切换配置环境\r\nname: gateway-web  #测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml\r\n## 忽视鉴权的url\r\ngateway:\r\n    ignore:\r\n        authentication:\r\n            url: /oauth/,/v3/api-docs,/favor.ioc #/oauth/ Oauth2授权端点    /v3/api-docs Swagger3接口页面的端点', 'e371e669e178c1fe530e6124d5a7267a', '2020-09-11 09:54:20', '2020-09-10 20:54:21', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (5, 59, 'gateway-web-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\nserver:\r\n    port: 9800 # 启动端口\r\nspring:\r\n    application:\r\n        name: gateway-web\r\n    cloud:\r\n        nacos:\r\n            discovery: #nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n                namespace: a4d0cf40-1125-4263-81e5-3f628bc90302 # 命名空间ID\r\n                #group: blog # 配置管理Group\r\n            config: #nacos配置中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #网关配置\r\n        gateway:\r\n            #默认的全局过滤器\r\n            default-filters:\r\n            discovery:\r\n                locator:\r\n                    enabled: true #注册中心生效，可以自动根据注册中心的服务名进行路由转发\r\n            routes: #路由配置，实际生产环境需要做到动态路由配置（而不需要像以下配置routes）\r\n                ##authorization-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9777/   或者注册服务serviceId的方式： lb://ribbon-consumer\r\n                -   id: authorization-server #路由的唯一id\r\n                    uri: lb://authorization-server\r\n                    predicates: #断言，即路由的规则\r\n                        - Path=/authorization-server/**\r\n                    filters: #过滤器\r\n                        - StripPrefix=1 #url截取的个数 本例会把/authorization-server截掉，截掉后的部分才是转发的url路径\r\n                ##authentication-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9779/   或者注册服务serviceId的方式： lb://feign-consumer\r\n                -   id: authentication-server\r\n                    uri: lb://authentication-server\r\n                    predicates:\r\n                        - Path=/authentication-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: admin-user\r\n                    uri: lb://admin-user\r\n                    predicates:\r\n                        - Path=/admin-user/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: article-admin\r\n                    uri: lb://article-admin\r\n                    predicates:\r\n                        - Path=/article-admin/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: file-server\r\n                    uri: lb://file-server\r\n                    predicates:\r\n                        - Path=/file-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n        # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    zipkin:\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址 自行到zipkin官网下载jar包安装运行\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n      sampler:\r\n          # 设置采集日志的百分比 1代表100%采集；可依据环境以及实际情况设置\r\n          probability: 1\r\n    #profiles:\r\n    #    active: dev # 根据不同环境切换配置环境\r\nname: gateway-web  #测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml\r\n## 忽视鉴权的url\r\ngateway:\r\n    ignore:\r\n        authentication:\r\n            url: /oauth/,/v3/api-docs,/favor.ioc #/oauth/ Oauth2授权端点    /v3/api-docs Swagger3接口页面的端点', 'a55f31ac11890792349f3814973ac316', '2020-09-11 10:08:47', '2020-09-10 21:08:47', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (3, 60, 'admin-user-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.user\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 后台用户管理api\r\n            description: 后台用户管理接口\r\n            version: 2.0\r\n            name: ZJH\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9803 # 启动端口\r\nspring:\r\n    application:\r\n        name: admin-user\r\n    #nacos注册中心地址配置\r\n    cloud:\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口 可不提供，默认为 8719，若端口冲突会自动向下探测可用的端口\r\n                dashboard: 129.211.34.120:8088 #控制台的地址  \r\n            datasource:\r\n                ds_flow: #读取nacos数据源的sentinel流控规则 admin-user-sentinel-flow-rules+DEFAULT_GROUP+a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-flow-rules #需要在nacos上面配置这个名称的json格式流控规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: flow\r\n                ds_degrade: #读取nacos数据源的sentinel降级规则\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-degrade-rules #需要在nacos上面配置这个名称的json格式降级规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: degrade\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    #实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.user.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        # mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n##feign使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml', '5ab5c154e7afd871f0a146ea69868974', '2020-09-11 10:09:27', '2020-09-10 21:09:27', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (5, 61, 'gateway-web-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\nserver:\r\n    port: 9800 # 启动端口\r\nspring:\r\n    application:\r\n        name: gateway-web\r\n    cloud:\r\n        nacos:\r\n            discovery: #nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n                namespace: a4d0cf40-1125-4263-81e5-3f628bc90302 # 命名空间ID\r\n                #group: blog # 配置管理Group\r\n            config: #nacos配置中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #网关配置\r\n        gateway:\r\n            #默认的全局过滤器\r\n            default-filters:\r\n            discovery:\r\n                locator:\r\n                    enabled: true #注册中心生效，可以自动根据注册中心的服务名进行路由转发\r\n            routes: #路由配置，实际生产环境需要做到动态路由配置（而不需要像以下配置routes）\r\n                ##authorization-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9777/   或者注册服务serviceId的方式： lb://ribbon-consumer\r\n                -   id: authorization-server #路由的唯一id\r\n                    uri: lb://authorization-server\r\n                    predicates: #断言，即路由的规则\r\n                        - Path=/authorization-server/**\r\n                    filters: #过滤器\r\n                        - StripPrefix=1 #url截取的个数 本例会把/authorization-server截掉，截掉后的部分才是转发的url路径\r\n                ##authentication-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9779/   或者注册服务serviceId的方式： lb://feign-consumer\r\n                -   id: authentication-server\r\n                    uri: lb://authentication-server\r\n                    predicates:\r\n                        - Path=/authentication-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: admin-user\r\n                    uri: lb://admin-user\r\n                    predicates:\r\n                        - Path=/admin-user/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: article-admin\r\n                    uri: lb://article-admin\r\n                    predicates:\r\n                        - Path=/article-admin/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: file-server\r\n                    uri: lb://file-server\r\n                    predicates:\r\n                        - Path=/file-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n        # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    zipkin:\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar包安装运行\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n      sampler:\r\n          # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n          probability: 1\r\n    #profiles:\r\n    #    active: dev # 根据不同环境切换配置环境\r\nname: gateway-web  #测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml\r\n## 忽视鉴权的url\r\ngateway:\r\n    ignore:\r\n        authentication:\r\n            url: /oauth/,/v3/api-docs,/favor.ioc #/oauth/ Oauth2授权端点    /v3/api-docs Swagger3接口页面的端点', '05c991a1eeb54d2bc429fc7f100146fe', '2020-09-11 10:18:15', '2020-09-10 21:18:16', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (3, 62, 'admin-user-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.user\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 后台用户管理api\r\n            description: 后台用户管理接口\r\n            version: 2.0\r\n            name: ZJH\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9803 # 启动端口\r\nspring:\r\n    application:\r\n        name: admin-user\r\n    #nacos注册中心地址配置\r\n    cloud:\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口 可不提供，默认为 8719，若端口冲突会自动向下探测可用的端口\r\n                dashboard: 129.211.34.120:8088 #控制台的地址  \r\n            datasource:\r\n                ds_flow: #读取nacos数据源的sentinel流控规则 admin-user-sentinel-flow-rules+DEFAULT_GROUP+a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-flow-rules #需要在nacos上面配置这个名称的json格式流控规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: flow\r\n                ds_degrade: #读取nacos数据源的sentinel降级规则\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-degrade-rules #需要在nacos上面配置这个名称的json格式降级规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: degrade\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar包安装运行\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n      sampler:\r\n          # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n          probability: 1\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    #实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.user.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        # mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n##feign使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml', '2628ffcf8ee6c4d9c069236e47a35555', '2020-09-11 10:18:35', '2020-09-10 21:18:35', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (3, 63, 'admin-user-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.user\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 后台用户管理api\r\n            description: 后台用户管理接口\r\n            version: 2.0\r\n            name: ZJH\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9803 # 启动端口\r\nspring:\r\n    application:\r\n        name: admin-user\r\n    #nacos注册中心地址配置\r\n    cloud:\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口 可不提供，默认为 8719，若端口冲突会自动向下探测可用的端口\r\n                dashboard: 129.211.34.120:8088 #控制台的地址  \r\n            datasource:\r\n                ds_flow: #读取nacos数据源的sentinel流控规则 admin-user-sentinel-flow-rules+DEFAULT_GROUP+a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-flow-rules #需要在nacos上面配置这个名称的json格式流控规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: flow\r\n                ds_degrade: #读取nacos数据源的sentinel降级规则\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-degrade-rules #需要在nacos上面配置这个名称的json格式降级规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: degrade\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        enabled: true #允许开启\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar包安装运行\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n      sampler:\r\n          # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n          probability: 1\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    #实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.user.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        # mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n##feign使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml', 'e85784f8f444f535c41b05a5b80555f3', '2020-09-11 10:29:16', '2020-09-10 21:29:16', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (5, 64, 'gateway-web-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\nserver:\r\n    port: 9800 # 启动端口\r\nspring:\r\n    application:\r\n        name: gateway-web\r\n    cloud:\r\n        nacos:\r\n            discovery: #nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n                namespace: a4d0cf40-1125-4263-81e5-3f628bc90302 # 命名空间ID\r\n                #group: blog # 配置管理Group\r\n            config: #nacos配置中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #网关配置\r\n        gateway:\r\n            #默认的全局过滤器\r\n            default-filters:\r\n            discovery:\r\n                locator:\r\n                    enabled: true #注册中心生效，可以自动根据注册中心的服务名进行路由转发\r\n            routes: #路由配置，实际生产环境需要做到动态路由配置（而不需要像以下配置routes）\r\n                ##authorization-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9777/   或者注册服务serviceId的方式： lb://ribbon-consumer\r\n                -   id: authorization-server #路由的唯一id\r\n                    uri: lb://authorization-server\r\n                    predicates: #断言，即路由的规则\r\n                        - Path=/authorization-server/**\r\n                    filters: #过滤器\r\n                        - StripPrefix=1 #url截取的个数 本例会把/authorization-server截掉，截掉后的部分才是转发的url路径\r\n                ##authentication-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9779/   或者注册服务serviceId的方式： lb://feign-consumer\r\n                -   id: authentication-server\r\n                    uri: lb://authentication-server\r\n                    predicates:\r\n                        - Path=/authentication-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: admin-user\r\n                    uri: lb://admin-user\r\n                    predicates:\r\n                        - Path=/admin-user/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: article-admin\r\n                    uri: lb://article-admin\r\n                    predicates:\r\n                        - Path=/article-admin/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: file-server\r\n                    uri: lb://file-server\r\n                    predicates:\r\n                        - Path=/file-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n        # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    zipkin:\r\n        enabled: true #允许开启\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar包安装运行\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n      sampler:\r\n          # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n          probability: 1\r\n    #profiles:\r\n    #    active: dev # 根据不同环境切换配置环境\r\nname: gateway-web  #测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml\r\n## 忽视鉴权的url\r\ngateway:\r\n    ignore:\r\n        authentication:\r\n            url: /oauth/,/v3/api-docs,/favor.ioc #/oauth/ Oauth2授权端点    /v3/api-docs Swagger3接口页面的端点', '0a4f1c35275d6672d772d058906ef2b1', '2020-09-11 10:29:35', '2020-09-10 21:29:36', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (11, 65, 'logback-logstash.xml', 'blog', '', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<configuration debug=\"false\" scan=\"true\" scanPeriod=\"60 seconds\">\r\n    \r\n    <!-- logback日志配置文件参考 -->\r\n\r\n    <!-- 只能设置为nacos，不然会报以下的错误 -->\r\n    <!-- ERROR in ch.qos.logback.classic.joran.action.ContextNameAction - Failed to rename context [nacos] as [logback] java.lang.IllegalStateException: Context has been already given a name -->\r\n    <contextName>nacos</contextName>\r\n    \r\n    <!-- 线上环境 docker部署，所以需要将这个路径挂载到宿主机中filebeat挂载的日志收集路径 -->\r\n    <property name=\"logback.logdir\" value=\"/logs\"/>\r\n    <!-- 本地windows开发环境配置 不设置绝对路径时，默认为当前项目下的路径 -->\r\n    <!--<property name=\"logback.logdir\" value=\"E:\\\\filebeat-6.8.2-windows-x86_64\\\\filebeat-6.8.2-windows-x86_64\\\\data\"/>-->\r\n    <property name=\"logback.appname\" value=\"logLocaldev\"/>\r\n\r\n    <!-- 格式化日志输出节点 -->\r\n    <!-- 控制台打印设置 -->\r\n    <appender name=\"consoleAppender\" class=\"ch.qos.logback.core.ConsoleAppender\">\r\n        <encoder class=\"ch.qos.logback.core.encoder.LayoutWrappingEncoder\">\r\n            <layout class=\"org.apache.skywalking.apm.toolkit.log.logback.v1.x.TraceIdPatternLogbackLayout\">\r\n                <!--\r\n                    %d{HH: mm:ss.SSS}——日志输出时间\r\n                    %thread——输出日志的进程名字\r\n                    %-5level——日志级别，并且使用5个字符靠左对齐\r\n                    %logger{36}——日志输出者的名字\r\n                    %tid——skywalking的traceId\r\n                    %msg——日志消息\r\n                    %n——平台的换行符\r\n                -->\r\n                <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level logger_name:%logger{36} - [%tid] - message:%msg%n</pattern>\r\n            </layout>\r\n        </encoder>\r\n    </appender>\r\n\r\n    <!-- 日志系统设置 -->\r\n    <!-- info级别的日志输出配置 -->\r\n    <appender name=\"fileInfoLog\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\r\n        <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，\r\n            所以我们使用下面的策略，可以避免输出 Error 的日志-->\r\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\r\n            <!--过滤 Error-->\r\n            <level>ERROR</level>\r\n            <!--匹配到就禁止-->\r\n            <onMatch>DENY</onMatch>\r\n            <!--没有匹配到就允许-->\r\n            <onMismatch>ACCEPT</onMismatch>\r\n        </filter>\r\n        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则\r\n            如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天\r\n            的日志改名为今天的日期。即，<File> 的日志都是当天的。\r\n        -->\r\n        <File>${logback.logdir}/info.${logback.appname}.log</File>\r\n        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->\r\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\r\n            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->\r\n            <FileNamePattern>${logback.logdir}/info.${logback.appname}.%d{yyyy-MM-dd}.log</FileNamePattern>\r\n            <!--只保留最近90天的日志-->\r\n            <maxHistory>90</maxHistory>\r\n            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->\r\n            <!--<totalSizeCap>1GB</totalSizeCap>-->\r\n        </rollingPolicy>\r\n        <!--日志输出编码格式化-->\r\n        <encoder>\r\n            <charset>UTF-8</charset>\r\n            <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>\r\n        </encoder>\r\n    </appender>\r\n\r\n    <!-- error级别的日志输出配置 -->\r\n    <appender name=\"fileErrorLog\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\r\n        <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->\r\n        <filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\r\n            <level>Error</level>\r\n        </filter>\r\n        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则\r\n            如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天\r\n            的日志改名为今天的日期。即，<File> 的日志都是当天的。\r\n        -->\r\n        <File>${logback.logdir}/error.${logback.appname}.log</File>\r\n        <!--滚动策略，按照时间滚动 TimeBasedRollingPolicy-->\r\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\r\n            <!--文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间-->\r\n            <FileNamePattern>${logback.logdir}/error.${logback.appname}.%d{yyyy-MM-dd}.log</FileNamePattern>\r\n            <!--只保留最近90天的日志-->\r\n            <maxHistory>90</maxHistory>\r\n            <!--用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志-->\r\n            <!--<totalSizeCap>1GB</totalSizeCap>-->\r\n        </rollingPolicy>\r\n        <!--日志输出编码格式化-->\r\n        <encoder>\r\n            <charset>UTF-8</charset>\r\n            <pattern>%d [%thread] %-5level %logger{36} %line - %msg%n</pattern>\r\n        </encoder>\r\n    </appender>\r\n\r\n    <!-- 用来指定最基础的日志输出级别 -->\r\n    <root level=\"info\">\r\n        <appender-ref ref=\"consoleAppender\" />\r\n        <appender-ref ref=\"fileInfoLog\"/>\r\n        <appender-ref ref=\"fileErrorLog\"/>\r\n    </root>\r\n</configuration>', '7fa23a3985a69699fb1743a22282cde7', '2020-09-11 14:20:18', '2020-09-11 01:20:18', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (11, 66, 'logback-logstash.xml', 'blog', '', '<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<configuration debug=\"false\" scan=\"true\" scanPeriod=\"60 seconds\">\r\n\r\n    <!-- 读取spring容器中的spring.application.name属性 -->\r\n    <springProperty scope=\"context\" name=\"appName\" source=\"spring.application.name\" />\r\n    <!-- 线上linux环境 docker部署，所以需要将这个路径挂载到宿主机中filebeat挂载的日志收集路径 -->\r\n    <property name=\"logback.logDir\" value=\"/logs\"/>\r\n    <!-- 本地windows开发环境配置 不设置绝对路径时，默认在系统用户路径下 -->\r\n    <!--<property name=\"logback.logDir\" value=\"E:\\\\filebeat-6.8.2-windows-x86_64\\\\filebeat-6.8.2-windows-x86_64\\\\data\"/>-->\r\n    <!-- 日志输出编码格式化 -->\r\n    <property name=\"charset\" value=\"UTF-8\"/>\r\n    <!-- 日志保留时长，设置只保留最近15天的日志 -->\r\n    <property name=\"maxHistory\" value=\"15\"/>\r\n    <!--\r\n        结合Sleuth自定义日志输出格式：\r\n        %yellow() 指定颜色，需要用括号把内容括起来\r\n        %d——日志输出时间 标准年月日时分秒格式\r\n        %thread——输出日志的进程名字\r\n        %-5level——日志级别，并且使用5个字符靠左对齐\r\n        ${appName}——spring配置文件的spring.application.name属性值\r\n        %X{X-B3-TraceId}——Sleuth的traceId为一个请求分配的追踪ID号，用来标识一条请求链路。\r\n        %X{X-B3-SpanId}——Sleuth的spanId表示一个基本的工作单元，一个请求可以包含多个步骤，每个步骤都拥有自己的spanId。一个请求包含一个TraceId，多个SpanId\r\n        %X{X-Span-Export}——是否将Sleuth链路信息传输到Zipkin\r\n        %logger{50}——日志输出者的名字\r\n         %line——log在代码中埋点的行数\r\n        %msg——日志消息\r\n        %n——平台的换行符\r\n    -->\r\n    <property name=\"consoleLogPattern\"\r\n              value=\"%d %yellow(%-5level [${appName},%X{X-B3-TraceId},%X{X-B3-SpanId},%X{X-Span-Export}]) [%thread] %green(%logger{50}) %line : %msg%n\"/>\r\n\r\n    <!-- 格式化日志输出节点 -->\r\n    <!-- 自定义控制台打印设置 -->\r\n    <appender name=\"consoleAppender\" class=\"ch.qos.logback.core.ConsoleAppender\">\r\n        <encoder class=\"ch.qos.logback.core.encoder.LayoutWrappingEncoder\">\r\n            <layout class=\"ch.qos.logback.classic.PatternLayout\">\r\n                <pattern>${consoleLogPattern}</pattern>\r\n            </layout>\r\n        </encoder>\r\n    </appender>\r\n\r\n    <!-- 日志系统设置 -->\r\n    <!-- info级别的日志输出配置 -->\r\n    <appender name=\"fileInfoLog\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\r\n        <!-- 如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，\r\n            所以我们使用下面的策略，可以避免输出 Error 的日志 -->\r\n        <filter class=\"ch.qos.logback.classic.filter.LevelFilter\">\r\n            <!-- 过滤 Error -->\r\n            <level>ERROR</level>\r\n            <!-- 匹配到就禁止 -->\r\n            <onMatch>DENY</onMatch>\r\n            <!-- 没有匹配到就允许 -->\r\n            <onMismatch>ACCEPT</onMismatch>\r\n        </filter>\r\n        <!-- 日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则\r\n            如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天\r\n            的日志改名为今天的日期。即，<File> 的日志都是当天的。\r\n        -->\r\n        <File>${logback.logDir}/info.${appName}.log</File>\r\n        <!-- 滚动策略，按照时间滚动 TimeBasedRollingPolicy -->\r\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\r\n            <!-- 文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->\r\n            <FileNamePattern>${logback.logDir}/info.${appName}.%d{yyyy-MM-dd}.log</FileNamePattern>\r\n            <!-- 日志保留时长 -->\r\n            <maxHistory>${maxHistory}</maxHistory>\r\n        </rollingPolicy>\r\n        <!-- 日志输出编码格式化 -->\r\n        <encoder>\r\n            <charset>${charset}</charset>\r\n            <pattern>${consoleLogPattern}</pattern>\r\n        </encoder>\r\n    </appender>\r\n\r\n    <!-- error级别的日志输出配置 -->\r\n    <appender name=\"fileErrorLog\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\">\r\n        <!-- 如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter -->\r\n        <filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\">\r\n            <level>Error</level>\r\n        </filter>\r\n        <!-- 日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则\r\n            如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天\r\n            的日志改名为今天的日期。即，<File> 的日志都是当天的。\r\n        -->\r\n        <File>${logback.logDir}/error.${appName}.log</File>\r\n        <!-- 滚动策略，按照时间滚动 TimeBasedRollingPolicy -->\r\n        <rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\">\r\n            <!-- 文件路径,定义了日志的切分方式——把每一天的日志归档到一个文件中,以防止日志填满整个磁盘空间 -->\r\n            <FileNamePattern>${logback.logDir}/error.${appName}.%d{yyyy-MM-dd}.log</FileNamePattern>\r\n            <!-- 日志保留时长 -->\r\n            <maxHistory>${maxHistory}</maxHistory>\r\n        </rollingPolicy>\r\n        <!-- 日志输出编码格式化 -->\r\n        <encoder>\r\n            <charset>${charset}</charset>\r\n            <pattern>${consoleLogPattern}</pattern>\r\n        </encoder>\r\n    </appender>\r\n\r\n    <!-- 用来指定最基础的日志输出级别 -->\r\n    <root level=\"info\">\r\n        <appender-ref ref=\"consoleAppender\" />\r\n        <appender-ref ref=\"fileInfoLog\"/>\r\n        <appender-ref ref=\"fileErrorLog\"/>\r\n    </root>\r\n</configuration>', '5942e204051535e59fb8a9b16b002757', '2020-09-11 14:21:41', '2020-09-11 01:21:42', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (3, 67, 'admin-user-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.user\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 后台用户管理api\r\n            description: 后台用户管理接口\r\n            version: 2.0\r\n            name: ZJH\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9803 # 启动端口\r\nspring:\r\n    application:\r\n        name: admin-user\r\n    #nacos注册中心地址配置\r\n    cloud:\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口 可不提供，默认为 8719，若端口冲突会自动向下探测可用的端口\r\n                dashboard: 129.211.34.120:8088 #控制台的地址  \r\n            datasource:\r\n                ds_flow: #读取nacos数据源的sentinel流控规则 admin-user-sentinel-flow-rules+DEFAULT_GROUP+a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-flow-rules #需要在nacos上面配置这个名称的json格式流控规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: flow\r\n                ds_degrade: #读取nacos数据源的sentinel降级规则\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-degrade-rules #需要在nacos上面配置这个名称的json格式降级规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: degrade\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        enabled: true #允许开启\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar包安装运行\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n      sampler:\r\n          # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n          probability: 1\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    #实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.user.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        # mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n##feign使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\n#logging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n#    config: classpath:logback-logstash.xml', '428e08a8e6f055102eee536a65b65d8a', '2020-09-11 14:23:54', '2020-09-11 01:23:54', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (3, 68, 'admin-user-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.user\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 后台用户管理api\r\n            description: 后台用户管理接口\r\n            version: 2.0\r\n            name: ZJH\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9803 # 启动端口\r\nspring:\r\n    application:\r\n        name: admin-user\r\n    #nacos注册中心地址配置\r\n    cloud:\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口 可不提供，默认为 8719，若端口冲突会自动向下探测可用的端口\r\n                dashboard: 129.211.34.120:8088 #控制台的地址  \r\n            datasource:\r\n                ds_flow: #读取nacos数据源的sentinel流控规则 admin-user-sentinel-flow-rules+DEFAULT_GROUP+a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-flow-rules #需要在nacos上面配置这个名称的json格式流控规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: flow\r\n                ds_degrade: #读取nacos数据源的sentinel降级规则\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-degrade-rules #需要在nacos上面配置这个名称的json格式降级规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: degrade\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        enabled: true #允许开启\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar包安装运行\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n      sampler:\r\n          # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n          probability: 1\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    #实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.user.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        # mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n##feign使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml', 'e85784f8f444f535c41b05a5b80555f3', '2020-09-11 14:48:52', '2020-09-11 01:48:52', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (5, 69, 'gateway-web-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\nserver:\r\n    port: 9800 # 启动端口\r\nspring:\r\n    application:\r\n        name: gateway-web\r\n    cloud:\r\n        nacos:\r\n            discovery: #nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n                namespace: a4d0cf40-1125-4263-81e5-3f628bc90302 # 命名空间ID\r\n                #group: blog # 配置管理Group\r\n            config: #nacos配置中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #网关配置\r\n        gateway:\r\n            #默认的全局过滤器\r\n            default-filters:\r\n            discovery:\r\n                locator:\r\n                    enabled: true #注册中心生效，可以自动根据注册中心的服务名进行路由转发\r\n            routes: #路由配置，实际生产环境需要做到动态路由配置（而不需要像以下配置routes）\r\n                ##authorization-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9777/   或者注册服务serviceId的方式： lb://ribbon-consumer\r\n                -   id: authorization-server #路由的唯一id\r\n                    uri: lb://authorization-server\r\n                    predicates: #断言，即路由的规则\r\n                        - Path=/authorization-server/**\r\n                    filters: #过滤器\r\n                        - StripPrefix=1 #url截取的个数 本例会把/authorization-server截掉，截掉后的部分才是转发的url路径\r\n                ##authentication-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9779/   或者注册服务serviceId的方式： lb://feign-consumer\r\n                -   id: authentication-server\r\n                    uri: lb://authentication-server\r\n                    predicates:\r\n                        - Path=/authentication-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: admin-user\r\n                    uri: lb://admin-user\r\n                    predicates:\r\n                        - Path=/admin-user/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: article-admin\r\n                    uri: lb://article-admin\r\n                    predicates:\r\n                        - Path=/article-admin/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: file-server\r\n                    uri: lb://file-server\r\n                    predicates:\r\n                        - Path=/file-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n        # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    zipkin:\r\n        enabled: true #允许开启\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar包安装运行\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n      sampler:\r\n          # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n          probability: 1\r\n    #profiles:\r\n    #    active: dev # 根据不同环境切换配置环境\r\nname: gateway-web  #测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\n#logging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n#    config: classpath:logback-logstash.xml\r\n## 忽视鉴权的url\r\ngateway:\r\n    ignore:\r\n        authentication:\r\n            url: /oauth/,/v3/api-docs,/favor.ioc #/oauth/ Oauth2授权端点    /v3/api-docs Swagger3接口页面的端点', '8165f50c9fd42176da8a4027a8f18c0d', '2020-09-11 14:49:08', '2020-09-11 01:49:09', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (5, 70, 'gateway-web-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\nserver:\r\n    port: 9800 # 启动端口\r\nspring:\r\n    application:\r\n        name: gateway-web\r\n    cloud:\r\n        nacos:\r\n            discovery: #nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n                namespace: a4d0cf40-1125-4263-81e5-3f628bc90302 # 命名空间ID\r\n                #group: blog # 配置管理Group\r\n            config: #nacos配置中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #网关配置\r\n        gateway:\r\n            #默认的全局过滤器\r\n            default-filters:\r\n            discovery:\r\n                locator:\r\n                    enabled: true #注册中心生效，可以自动根据注册中心的服务名进行路由转发\r\n            routes: #路由配置，实际生产环境需要做到动态路由配置（而不需要像以下配置routes）\r\n                ##authorization-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9777/   或者注册服务serviceId的方式： lb://ribbon-consumer\r\n                -   id: authorization-server #路由的唯一id\r\n                    uri: lb://authorization-server\r\n                    predicates: #断言，即路由的规则\r\n                        - Path=/authorization-server/**\r\n                    filters: #过滤器\r\n                        - StripPrefix=1 #url截取的个数 本例会把/authorization-server截掉，截掉后的部分才是转发的url路径\r\n                ##authentication-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9779/   或者注册服务serviceId的方式： lb://feign-consumer\r\n                -   id: authentication-server\r\n                    uri: lb://authentication-server\r\n                    predicates:\r\n                        - Path=/authentication-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: admin-user\r\n                    uri: lb://admin-user\r\n                    predicates:\r\n                        - Path=/admin-user/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: article-admin\r\n                    uri: lb://article-admin\r\n                    predicates:\r\n                        - Path=/article-admin/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: file-server\r\n                    uri: lb://file-server\r\n                    predicates:\r\n                        - Path=/file-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n        # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    zipkin:\r\n        enabled: true #允许开启\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar\r\n        sender:\r\n            type: web #当配置了base-url，此项可不配置，默认使用http方式收集包安装运行\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n      sampler:\r\n          # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n          probability: 1\r\n    #profiles:\r\n    #    active: dev # 根据不同环境切换配置环境\r\nname: gateway-web  #测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\n#logging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n#    config: classpath:logback-logstash.xml\r\n## 忽视鉴权的url\r\ngateway:\r\n    ignore:\r\n        authentication:\r\n            url: /oauth/,/v3/api-docs,/favor.ioc #/oauth/ Oauth2授权端点    /v3/api-docs Swagger3接口页面的端点', '676d129a48a6cf542786bf56321dc1a9', '2020-09-11 14:50:47', '2020-09-11 01:50:48', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (3, 71, 'admin-user-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.user\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 后台用户管理api\r\n            description: 后台用户管理接口\r\n            version: 2.0\r\n            name: ZJH\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9803 # 启动端口\r\nspring:\r\n    application:\r\n        name: admin-user\r\n    #nacos注册中心地址配置\r\n    cloud:\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口 可不提供，默认为 8719，若端口冲突会自动向下探测可用的端口\r\n                dashboard: 129.211.34.120:8088 #控制台的地址  \r\n            datasource:\r\n                ds_flow: #读取nacos数据源的sentinel流控规则 admin-user-sentinel-flow-rules+DEFAULT_GROUP+a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-flow-rules #需要在nacos上面配置这个名称的json格式流控规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: flow\r\n                ds_degrade: #读取nacos数据源的sentinel降级规则\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-degrade-rules #需要在nacos上面配置这个名称的json格式降级规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: degrade\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        enabled: true #允许开启\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar\r\n        sender:\r\n            type: web #当配置了base-url，此项可不配置，默认使用http方式收集包安装运行\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n      sampler:\r\n          # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n          probability: 1\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    #实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.user.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        # mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n##feign使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml', '150f310ab113d61af2132fbee0f34e4e', '2020-09-11 14:51:05', '2020-09-11 01:51:05', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (9, 72, 'distributed-transaction-rabbitmq-consumer-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.demo\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 分布式事务demo api\r\n            description: 分布式事务demo接口\r\n            version: 2.0\r\n        rabbitmq:\r\n            points-queue: points.queue\r\n            points-retry-queue: points.retry.queue\r\n            points-route-key: points.route.key\r\n            points-exchange: points.exchange\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9901 # 启动端口\r\nspring:\r\n    application:\r\n        name: distributed-transaction-rabbitmq-consumer\r\n    cloud:\r\n        #nacos注册中心地址配置\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/distributed-transaction-rabbitmq-consumer?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    #rabbitmq配置\r\n    rabbitmq:\r\n        host: 129.211.34.120 #ip\r\n        port: 5672 #端口\r\n        username: admin #用户名\r\n        password: zeng@19940125... #密码\r\n        virtual-host: / #虚拟主机 每个virtual-host相当于一个相对独立的RabbitMQ服务器，每个virtual-host之间是相互隔离的\r\n        listener:\r\n            simple:\r\n                retry:\r\n                    enabled: false #监听重试是否可用\r\n                    max-attempts: 5 #最大重试次数\r\n                    initial-interval: 3000 #重试间隔次数\r\n                acknowledge-mode: manual #消息确认方式,开启手动ack确认\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    #实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.demo.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        # mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\nname: distributed-transaction-rabbitmq-consumer  # 测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml', 'e71385a4e1edcdf8294c7b8d12c215c2', '2020-09-11 15:16:46', '2020-09-11 02:16:47', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (10, 73, 'distributed-transaction-rabbitmq-producer-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.demo\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 分布式事务demo api\r\n            description: 分布式事务demo接口\r\n            version: 2.0\r\n        rabbitmq:\r\n            points-queue: points.queue\r\n            points-retry-queue: points.retry.queue\r\n            points-route-key: points.route.key\r\n            points-exchange: points.exchange\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9900 # 启动端口\r\nspring:\r\n    application:\r\n        name: distributed-transaction-rabbitmq-producer\r\n    cloud:\r\n        #nacos注册中心地址配置\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/distributed-transaction-rabbitmq-producer?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    #rabbitmq配置\r\n    rabbitmq:\r\n        host: 129.211.34.120 #ip\r\n        port: 5672 #端口\r\n        username: admin #用户名\r\n        password: zeng@19940125... #密码\r\n        virtual-host: / #虚拟主机 每个virtual-host相当于一个相对独立的RabbitMQ服务器，每个virtual-host之间是相互隔离的\r\n        publisher-returns: true #消息接收确认\r\n        publisher-confirm-type: correlated #确认回调\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    #实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.demo.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        # mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\nname: distributed-transaction-rabbitmq-producer  # 测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml\r\n', '65d04932ce12a1cdda976bf2f41e27ab', '2020-09-11 15:17:40', '2020-09-11 02:17:41', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (8, 74, 'sharding-jdbc-mybatisplus-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.demo\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: sharding分表分库demo api\r\n            description: sharding分表分库demo接口\r\n            version: 2.0\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9903 # 启动端口\r\nspring:\r\n    application:\r\n        name: sharding-jdbc-mybatisplus\r\n    cloud:\r\n        #nacos注册中心地址配置\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n   \r\n    # 配置sharding-jdbc分表分库\r\n    shardingsphere:\r\n        props:\r\n            # 打印sql\r\n            sql.show: true\r\n            check:\r\n                table:\r\n                    metadata:\r\n                        # 是否在启动时检查分表元数据一致性\r\n                        enabled: false\r\n        # 分库 数据源配置\r\n        datasource:\r\n            # 数据源汇总 这里案例使用三个数据库\r\n            names: db0,db1,db2\r\n            db0:\r\n                type: com.zaxxer.hikari.HikariDataSource\r\n                hikari:\r\n                    minimum-idle: 10 # 池中维护的最小空闲连接数\r\n                    idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n                    maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n                    auto-commit: true # 自动提交从池中返回的连接\r\n                    pool-name: HikariCP # 连接池的用户定义名称\r\n                    max-lifetime: 600000 # 池中连接最长生命周期\r\n                    connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n                    connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n                driver-class-name: com.mysql.cj.jdbc.Driver\r\n                jdbcUrl: jdbc:mysql://129.211.34.120:3306/db0?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n                username: root\r\n                password: zeng@19940125...\r\n            db1:\r\n                type: com.zaxxer.hikari.HikariDataSource\r\n                hikari:\r\n                    minimum-idle: 10 # 池中维护的最小空闲连接数\r\n                    idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n                    maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n                    auto-commit: true # 自动提交从池中返回的连接\r\n                    pool-name: HikariCP # 连接池的用户定义名称\r\n                    max-lifetime: 600000 # 池中连接最长生命周期\r\n                    connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n                    connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n                driver-class-name: com.mysql.cj.jdbc.Driver\r\n                jdbcUrl: jdbc:mysql://129.211.34.120:3306/db1?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n                username: root\r\n                password: zeng@19940125...\r\n            db2:\r\n                type: com.zaxxer.hikari.HikariDataSource\r\n                hikari:\r\n                    minimum-idle: 10 # 池中维护的最小空闲连接数\r\n                    idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n                    maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n                    auto-commit: true # 自动提交从池中返回的连接\r\n                    pool-name: HikariCP # 连接池的用户定义名称\r\n                    max-lifetime: 600000 # 池中连接最长生命周期\r\n                    connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n                    connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n                driver-class-name: com.mysql.cj.jdbc.Driver\r\n                jdbcUrl: jdbc:mysql://129.211.34.120:3306/db2?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n                username: root\r\n                password: zeng@19940125...\r\n        # 分片规则\r\n        sharding:\r\n            # 默认数据源\r\n            default-data-source-name: db0\r\n            # 默认主键生成策略\r\n            default-key-generator:\r\n                type: SNOWFLAKE\r\n                column: id\r\n                worker:\r\n                    id: order # 雪花算法workid\r\n                max:\r\n                    tolerate:\r\n                        time:\r\n                            difference:\r\n                                milliseconds: 1\r\n            # 默认分库策略 根据用户id取模\r\n            default-database-strategy:\r\n                inline:\r\n                    sharding-column: user_id #分片列名  属性不能是String,只能是整型\r\n                    algorithm-expression: db$->{user_id % 3}  #分库算法Inline表达式，需要符合groovy动态语法\r\n            # 广播表 一些静态信息表。 广播分发到每一个数据源，方便查询join。例如：订单字典表\r\n            broadcast-tables:\r\n               - t_dict\r\n            # 绑定表关系 分片策略相同的表，即可建立绑定关系  多个以逗号分隔\r\n            bindingTables:\r\n                - t_order,t_order_item\r\n            # 具体表策略\r\n            tables:\r\n                # 字典表（广播表，配置在基础库db中）\r\n                # t_dict:\r\n                #     actual-data-nodes: db.t_dict\r\n                # 订单表 根据订单id取模\r\n                t_order:\r\n                    # 共9个节点 db0.t_order_0,db0.t_order_1,db0.t_order_2,db1.t_order_0,db1.t_order_1,db1.t_order_2,db2.t_order_0,db2.t_order_1,db2.t_order_2\r\n                    actual-data-nodes: db$->{0..2}.t_order_$->{0..2}\r\n                    table-strategy:\r\n                        inline:\r\n                            sharding-column: id #分片列名  属性不能是String,只能是整型\r\n                            algorithm-expression: t_order_$->{id % 3} #分库算法Inline表达式，需要符合groovy动态语法\r\n                    key-generator:\r\n                            type: SNOWFLAKE\r\n                            column: id\r\n                # 订单表详情 根据订单id取模\r\n                t_order_item:\r\n                    actual-data-nodes: db$->{0..2}.t_order_item_$->{0..2}\r\n                    table-strategy:\r\n                        inline:\r\n                            sharding-column: order_id #分片列名  属性不能是String,只能是整型\r\n                            algorithm-expression: t_order_item_$->{order_id % 3} #分库算法Inline表达式，需要符合groovy动态语法\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    # 实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.demo.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        #mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\nname: sharding-jdbc-mybatisplus  # 测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml', 'd6a1bd3eb49c64550ce39fbb84800d8d', '2020-09-11 15:18:00', '2020-09-11 02:18:00', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (1, 75, 'authorization-server-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\nserver:\r\n    port: 9801 # 启动端口\r\nspring:\r\n    application:\r\n        name: authorization-server\r\n    #nacos注册中心地址配置\r\n    cloud:\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n    \r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/oauth2?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\nname: nacosConfig  #测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml', 'faadb105b05c4fd116e636df1bc2fe99', '2020-09-11 15:18:43', '2020-09-11 02:18:44', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (2, 76, 'authentication-server-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\nserver:\r\n    port: 9802 # 启动端口\r\nspring:\r\n    application:\r\n        name: authentication-server\r\n    cloud:\r\n        nacos:\r\n            discovery: #nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/oauth2?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\nname: nacosConfig  #测试用\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml\r\n\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true', '5f8791e2f39642cda9ca6a39ade331f7', '2020-09-11 15:18:58', '2020-09-11 02:18:59', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (6, 77, 'article-admin-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.article\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 博客文章管理api\r\n            description: 博客文章管理接口\r\n            version: 2.0\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9804 # 启动端口\r\nspring:\r\n    application:\r\n        name: article-admin\r\n    cloud:\r\n        nacos:\r\n            discovery: # nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n            config: # nacos配置中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8080 #控制台的地址\r\n    profiles:\r\n        active: dev # 根据不同环境切换配置环境\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/weblog?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n        max-idle: 5\r\n        # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    #实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.article.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        # mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\nname: article-admin  # 测试用\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml\r\n# xxl-job配置参数\r\nxxl: \r\n    job: \r\n        admin: ### 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行\"执行器心跳注册\"和\"任务结果回调\"；为空则关闭自动注册；\r\n            addresses: http://129.211.34.120:9090/xxl-job-admin\r\n        executor: ### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册\r\n            appname: article-admin\r\n            port: 9005', '70c0770fea250269fbee0cce59646d2e', '2020-09-11 15:19:33', '2020-09-11 02:19:34', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (7, 78, 'file-server-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.file\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 文件服务器管理api\r\n            description: 文件服务器管理接口\r\n            version: 2.0\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9805 # 启动端口\r\nspring:\r\n    application:\r\n        name: file-server\r\n    cloud:\r\n        nacos:\r\n            discovery: # nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n            config: # nacos配置中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8080 #控制台的地址\r\n    profiles:\r\n        active: dev # 根据不同环境切换配置环境\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\nname: file-server  # 测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\n##logger_name:o.s.c.b.c.PropertySourceBootstrapConfiguration - [TID: N/A] - message:Error opening logging config file classpath:logback-logstash.xml\r\n #java.lang.IllegalStateException: Logback configuration error detected:\r\n #ERROR in ch.qos.logback.classic.joran.action.ContextNameAction - Failed to rename context [nacos] as [logback] java.lang.IllegalStateException: Context has been already given a name\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件，假如本地不配置这个，会出现上面的报错信息\r\n    config: classpath:logback-logstash.xml\r\n# 七牛云配置参数\r\nqiniu:\r\n    accessKey: iNffcCO5SH8qw-GgV9L_QGbTH2_xLgEVdZIsq6nW\r\n    secretKey: NSNHLflVqXkOM86sEvxbTew3LEX2fCUf-ifQU5TI\r\n    bucket: huijunzeng\r\n    path: www.baidu.com  # 外链域名\r\n', '21b85d557539b63bf825629766017446', '2020-09-11 15:20:24', '2020-09-11 02:20:25', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (1, 79, 'authorization-server-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\nserver:\r\n    port: 9801 # 启动端口\r\nspring:\r\n    application:\r\n        name: authorization-server\r\n    #nacos注册中心地址配置\r\n    cloud:\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n    \r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/oauth2?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        enabled: true #默认允许开启\r\n        base-url: http://localhost:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar包安装运行\r\n        sender:\r\n            type: web #当配置了base-url，此项可不配置，默认使用http方式收集\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n        sampler:\r\n            # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n            probability: 1\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\nname: nacosConfig  #测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml', 'b3d5229242e2baa18598960c105b139f', '2020-09-11 15:21:07', '2020-09-11 02:21:08', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (2, 80, 'authentication-server-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\nserver:\r\n    port: 9802 # 启动端口\r\nspring:\r\n    application:\r\n        name: authentication-server\r\n    cloud:\r\n        nacos:\r\n            discovery: #nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/oauth2?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        enabled: true #默认允许开启\r\n        base-url: http://localhost:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar包安装运行\r\n        sender:\r\n            type: web #当配置了base-url，此项可不配置，默认使用http方式收集\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n        sampler:\r\n            # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n            probability: 1\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\nname: nacosConfig  #测试用\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml\r\n\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true', 'e05e058df7dbbb780fbf78ffb3d1df62', '2020-09-11 15:21:23', '2020-09-11 02:21:23', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (6, 81, 'article-admin-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.article\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 博客文章管理api\r\n            description: 博客文章管理接口\r\n            version: 2.0\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9804 # 启动端口\r\nspring:\r\n    application:\r\n        name: article-admin\r\n    cloud:\r\n        nacos:\r\n            discovery: # nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n            config: # nacos配置中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8080 #控制台的地址\r\n    profiles:\r\n        active: dev # 根据不同环境切换配置环境\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/weblog?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n        max-idle: 5\r\n        # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        enabled: true #默认允许开启\r\n        base-url: http://localhost:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar包安装运行\r\n        sender:\r\n            type: web #当配置了base-url，此项可不配置，默认使用http方式收集\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n        sampler:\r\n            # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n            probability: 1\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    #实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.article.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        # mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\nname: article-admin  # 测试用\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml\r\n# xxl-job配置参数\r\nxxl: \r\n    job: \r\n        admin: ### 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行\"执行器心跳注册\"和\"任务结果回调\"；为空则关闭自动注册；\r\n            addresses: http://129.211.34.120:9090/xxl-job-admin\r\n        executor: ### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册\r\n            appname: article-admin\r\n            port: 9005', '854d0d55af02d803eed0f8f67190108d', '2020-09-11 15:21:50', '2020-09-11 02:21:51', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (7, 82, 'file-server-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.file\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 文件服务器管理api\r\n            description: 文件服务器管理接口\r\n            version: 2.0\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9805 # 启动端口\r\nspring:\r\n    application:\r\n        name: file-server\r\n    cloud:\r\n        nacos:\r\n            discovery: # nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n            config: # nacos配置中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8080 #控制台的地址\r\n    profiles:\r\n        active: dev # 根据不同环境切换配置环境\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        enabled: true #默认允许开启\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar包安装运行\r\n        sender:\r\n            type: web #当配置了base-url，此项可不配置，默认使用http方式收集\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n        sampler:\r\n            # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n            probability: 1\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\nname: file-server  # 测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\n##logger_name:o.s.c.b.c.PropertySourceBootstrapConfiguration - [TID: N/A] - message:Error opening logging config file classpath:logback-logstash.xml\r\n #java.lang.IllegalStateException: Logback configuration error detected:\r\n #ERROR in ch.qos.logback.classic.joran.action.ContextNameAction - Failed to rename context [nacos] as [logback] java.lang.IllegalStateException: Context has been already given a name\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件，假如本地不配置这个，会出现上面的报错信息\r\n    config: classpath:logback-logstash.xml\r\n# 七牛云配置参数\r\nqiniu:\r\n    accessKey: iNffcCO5SH8qw-GgV9L_QGbTH2_xLgEVdZIsq6nW\r\n    secretKey: NSNHLflVqXkOM86sEvxbTew3LEX2fCUf-ifQU5TI\r\n    bucket: huijunzeng\r\n    path: www.baidu.com  # 外链域名\r\n', '19176ef1f04344ef776f0fda26dec2e4', '2020-09-11 15:23:15', '2020-09-11 02:23:15', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (1, 83, 'authorization-server-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\nserver:\r\n    port: 9801 # 启动端口\r\nspring:\r\n    application:\r\n        name: authorization-server\r\n    #nacos注册中心地址配置\r\n    cloud:\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n    \r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/oauth2?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        enabled: true #默认允许开启\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar\r\n        sender:\r\n            type: web #当配置了base-url，此项可不配置，默认使用http方式收集\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n        sampler:\r\n            # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n            probability: 1\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\nname: nacosConfig  #测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml', 'b87ccf47e35af4e1b21e5fae3b46811e', '2020-09-11 15:23:31', '2020-09-11 02:23:32', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (2, 84, 'authentication-server-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\nserver:\r\n    port: 9802 # 启动端口\r\nspring:\r\n    application:\r\n        name: authentication-server\r\n    cloud:\r\n        nacos:\r\n            discovery: #nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/oauth2?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        enabled: true #默认允许开启\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar\r\n        sender:\r\n            type: web #当配置了base-url，此项可不配置，默认使用http方式收集\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n        sampler:\r\n            # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n            probability: 1\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\nname: nacosConfig  #测试用\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml\r\n\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true', 'faf030b48be7da598adffc3b10e73612', '2020-09-11 15:23:44', '2020-09-11 02:23:45', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (3, 85, 'admin-user-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.user\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 后台用户管理api\r\n            description: 后台用户管理接口\r\n            version: 2.0\r\n            name: ZJH\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9803 # 启动端口\r\nspring:\r\n    application:\r\n        name: admin-user\r\n    #nacos注册中心地址配置\r\n    cloud:\r\n        nacos:\r\n            discovery: \r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口 可不提供，默认为 8719，若端口冲突会自动向下探测可用的端口\r\n                dashboard: 129.211.34.120:8088 #控制台的地址  \r\n            datasource:\r\n                ds_flow: #读取nacos数据源的sentinel流控规则 admin-user-sentinel-flow-rules+DEFAULT_GROUP+a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-flow-rules #需要在nacos上面配置这个名称的json格式流控规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: flow\r\n                ds_degrade: #读取nacos数据源的sentinel降级规则\r\n                    nacos:\r\n                        server-addr: 129.211.34.120:8848\r\n                        data-id: ${spring.application.name}-sentinel-degrade-rules #需要在nacos上面配置这个名称的json格式降级规则\r\n                        group-id: blog\r\n                        namespace: a4d0cf40-1125-4263-81e5-3f628bc90302\r\n                        data-type: json\r\n                        rule-type: degrade\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n\r\n    # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        enabled: true #默认允许开启\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar\r\n        sender:\r\n            type: web #当配置了base-url，此项可不配置，默认使用http方式收集包安装运行\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n      sampler:\r\n          # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n          probability: 1\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    #实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.user.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        # mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\n##feign使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml', 'fdf7a4b8760c00d2fd2423af56846f46', '2020-09-11 15:24:00', '2020-09-11 02:24:01', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (5, 86, 'gateway-web-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\nserver:\r\n    port: 9800 # 启动端口\r\nspring:\r\n    application:\r\n        name: gateway-web\r\n    cloud:\r\n        nacos:\r\n            discovery: #nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n                namespace: a4d0cf40-1125-4263-81e5-3f628bc90302 # 命名空间ID\r\n                #group: blog # 配置管理Group\r\n            config: #nacos配置中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #网关配置\r\n        gateway:\r\n            #默认的全局过滤器\r\n            default-filters:\r\n            discovery:\r\n                locator:\r\n                    enabled: true #注册中心生效，可以自动根据注册中心的服务名进行路由转发\r\n            routes: #路由配置，实际生产环境需要做到动态路由配置（而不需要像以下配置routes）\r\n                ##authorization-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9777/   或者注册服务serviceId的方式： lb://ribbon-consumer\r\n                -   id: authorization-server #路由的唯一id\r\n                    uri: lb://authorization-server\r\n                    predicates: #断言，即路由的规则\r\n                        - Path=/authorization-server/**\r\n                    filters: #过滤器\r\n                        - StripPrefix=1 #url截取的个数 本例会把/authorization-server截掉，截掉后的部分才是转发的url路径\r\n                ##authentication-server调用  两种方式（实际中以第二种方式配置并持久化数据库）： 服务url的方式：http://localhost:9779/   或者注册服务serviceId的方式： lb://feign-consumer\r\n                -   id: authentication-server\r\n                    uri: lb://authentication-server\r\n                    predicates:\r\n                        - Path=/authentication-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: admin-user\r\n                    uri: lb://admin-user\r\n                    predicates:\r\n                        - Path=/admin-user/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: article-admin\r\n                    uri: lb://article-admin\r\n                    predicates:\r\n                        - Path=/article-admin/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n                -   id: file-server\r\n                    uri: lb://file-server\r\n                    predicates:\r\n                        - Path=/file-server/**\r\n                    filters:\r\n                        - StripPrefix=1\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8088 #控制台的地址       \r\n\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/user?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n        # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    zipkin:\r\n        enabled: true #默认允许开启\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar\r\n        sender:\r\n            type: web #当配置了base-url，此项可不配置，默认使用http方式收集包安装运行\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n      sampler:\r\n          # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n          probability: 1\r\n    #profiles:\r\n    #    active: dev # 根据不同环境切换配置环境\r\nname: gateway-web  #测试用\r\n##使用sentinel配置\r\nfeign:\r\n    sentinel:\r\n        enabled: true\r\n#logging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n#    config: classpath:logback-logstash.xml\r\n## 忽视鉴权的url\r\ngateway:\r\n    ignore:\r\n        authentication:\r\n            url: /oauth/,/v3/api-docs,/favor.ioc #/oauth/ Oauth2授权端点    /v3/api-docs Swagger3接口页面的端点', 'bd8e4ba4b63f40c49acf92785023bc37', '2020-09-11 15:24:16', '2020-09-11 02:24:16', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');
INSERT INTO `his_config_info` VALUES (6, 87, 'article-admin-dev.yml', 'blog', '', '## 用nacos配置中心配置  Data ID的生成规则：${spring.application.name}-${spring.profiles.active}\r\n\r\n##自定义属性\r\nbase:\r\n    config:\r\n        swagger:\r\n            enabled: true\r\n            api-base-package: com.teeya.article\r\n            contact:\r\n                name: ZJH\r\n                email: 18826233829@163.com\r\n                url:\r\n            title: 博客文章管理api\r\n            description: 博客文章管理接口\r\n            version: 2.0\r\n\r\n##非自定义属性\r\nserver:\r\n    port: 9804 # 启动端口\r\nspring:\r\n    application:\r\n        name: article-admin\r\n    cloud:\r\n        nacos:\r\n            discovery: # nacos注册中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n            config: # nacos配置中心地址配置\r\n                server-addr: 129.211.34.120:8848\r\n        #sentinel配置\r\n        sentinel:\r\n            transport:\r\n                port: 8719 #指定客户端监控 API 的端口  默认，可不设置\r\n                dashboard: 129.211.34.120:8080 #控制台的地址\r\n    profiles:\r\n        active: dev # 根据不同环境切换配置环境\r\n    # 数据源mysql配置\r\n    datasource:\r\n        driver-class-name: com.mysql.cj.jdbc.Driver\r\n        url: jdbc:mysql://129.211.34.120:3306/weblog?characterEncoding=UTF-8&useUnicode=true&useSSL=false\r\n        username: root\r\n        password: zeng@19940125...\r\n        max-idle: 5\r\n        # 数据源hikari连接池配置\r\n        type: com.zaxxer.hikari.HikariDataSource\r\n        hikari:\r\n            minimum-idle: 10 # 池中维护的最小空闲连接数\r\n            idle-timeout: 60000 # 连接允许在池中闲置的最长时间\r\n            maximum-pool-size: 20 # 池中最大连接数，包括闲置和使用中的连接\r\n            auto-commit: true # 自动提交从池中返回的连接\r\n            pool-name: HikariCP # 连接池的用户定义名称\r\n            max-lifetime: 600000 # 池中连接最长生命周期\r\n            connection-timeout: 30000 # 等待来自池的连接的最大毫秒数\r\n            connection-test-query: SELECT 1 # 指定校验连接合法性执行的sql语句\r\n    # redis配置\r\n    redis:\r\n        host: 129.211.34.120\r\n        port: 6379\r\n        password: zeng@19940125...\r\n    # zipkin配置，链路调用可视化面板\r\n    zipkin:\r\n        enabled: true #默认允许开启\r\n        base-url: http://129.211.34.120:9411/ #zipkin服务器地址，sleuth会将数据传输到zipkin服务器 需自行到zipkin官网下载jar\r\n        sender:\r\n            type: web #当配置了base-url，此项可不配置，默认使用http方式收集\r\n    # sleuth链路跟踪配置\r\n    sleuth:\r\n        sampler:\r\n            # 设置采集日志的百分比，数值范围0-1， 1代表100%采集；可依据环境以及实际情况设置\r\n            probability: 1\r\n    # jackson配置\r\n    jackson:\r\n        # 以下为时间格式转换全局设置，如果只需局部设置则在时间字段上加注解@JsonFormat(pattern=\"yyyy-MM-dd HH:mm:ss\",timezone=\"GMT+8\")\r\n        date-format: yyyy-MM-dd HH:mm:ss\r\n        time-zone: GMT+8\r\n        # 属性值为NULL的字段则不参与序列化，即null值不返回给前端\r\n        default-property-inclusion: non_null\r\n# mybatis配置\r\nmybatis-plus:\r\n    # mapper层xml文件路径映射\r\n    mapper-locations: classpath:mapper/*.xml\r\n    #实体扫描，多个package用逗号或者分号分隔\r\n    type-aliases-package: com.teeya.article.entity\r\n    configuration:\r\n        # 开启驼峰式命名规则自动转换 对于数据库有下划线_的字段，需要配置\r\n        map-underscore-to-camel-case: true\r\n        # mybatis-plus配置控制台打印完整带参数SQL语句\r\n        log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\r\nname: article-admin  # 测试用\r\nlogging: #日志配置文件引入 classpath的默认路径为resources目录下，所以需要在resources目录下添加logback-logstash.xml日志配置文件\r\n    config: classpath:logback-logstash.xml\r\n# xxl-job配置参数\r\nxxl: \r\n    job: \r\n        admin: ### 调度中心部署跟地址 [选填]：如调度中心集群部署存在多个地址则用逗号分隔。执行器将会使用该地址进行\"执行器心跳注册\"和\"任务结果回调\"；为空则关闭自动注册；\r\n            addresses: http://129.211.34.120:9090/xxl-job-admin\r\n        executor: ### 执行器AppName [选填]：执行器心跳注册分组依据；为空则关闭自动注册\r\n            appname: article-admin\r\n            port: 9005', '4402b2067fa414833a17e537afc214ad', '2020-09-11 15:24:32', '2020-09-11 02:24:32', NULL, '116.21.13.15', 'U', 'a4d0cf40-1125-4263-81e5-3f628bc90302');

-- ----------------------------
-- Table structure for permissions
-- ----------------------------
DROP TABLE IF EXISTS `permissions`;
CREATE TABLE `permissions`  (
  `role` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `resource` varchar(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `action` varchar(8) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  UNIQUE INDEX `uk_role_permission`(`role`, `resource`, `action`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for roles
-- ----------------------------
DROP TABLE IF EXISTS `roles`;
CREATE TABLE `roles`  (
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `role` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  UNIQUE INDEX `idx_user_role`(`username`, `role`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of roles
-- ----------------------------
INSERT INTO `roles` VALUES ('nacos', 'ROLE_ADMIN');

-- ----------------------------
-- Table structure for tenant_capacity
-- ----------------------------
DROP TABLE IF EXISTS `tenant_capacity`;
CREATE TABLE `tenant_capacity`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Tenant ID',
  `quota` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '配额，0表示使用默认值',
  `usage` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '使用量',
  `max_size` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
  `max_aggr_count` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '聚合子配置最大个数',
  `max_aggr_size` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
  `max_history_count` int(10) UNSIGNED NOT NULL DEFAULT 0 COMMENT '最大变更历史数量',
  `gmt_create` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `gmt_modified` datetime(0) NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_tenant_id`(`tenant_id`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = '租户容量信息表' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Table structure for tenant_info
-- ----------------------------
DROP TABLE IF EXISTS `tenant_info`;
CREATE TABLE `tenant_info`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
  `kp` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NOT NULL COMMENT 'kp',
  `tenant_id` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT 'tenant_id',
  `tenant_name` varchar(128) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT '' COMMENT 'tenant_name',
  `tenant_desc` varchar(256) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'tenant_desc',
  `create_source` varchar(32) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT 'create_source',
  `gmt_create` bigint(20) NOT NULL COMMENT '创建时间',
  `gmt_modified` bigint(20) NOT NULL COMMENT '修改时间',
  PRIMARY KEY (`id`) USING BTREE,
  UNIQUE INDEX `uk_tenant_info_kptenantid`(`kp`, `tenant_id`) USING BTREE,
  INDEX `idx_tenant_id`(`tenant_id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 2 CHARACTER SET = utf8 COLLATE = utf8_bin COMMENT = 'tenant_info' ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of tenant_info
-- ----------------------------
INSERT INTO `tenant_info` VALUES (1, '1', 'a4d0cf40-1125-4263-81e5-3f628bc90302', 'dev', '开发环境', 'nacos', 1593254744149, 1593254744149);

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users`  (
  `username` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `password` varchar(500) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,
  `enabled` tinyint(1) NOT NULL,
  PRIMARY KEY (`username`) USING BTREE
) ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of users
-- ----------------------------
INSERT INTO `users` VALUES ('nacos', '$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu', 1);

SET FOREIGN_KEY_CHECKS = 1;
